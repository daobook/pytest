# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 7.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 11:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../../en/deprecations.rst:4
msgid "Deprecations and Removals"
msgstr ""

#: ../../../en/deprecations.rst:6
msgid ""
"This page lists all pytest features that are currently deprecated or have"
" been removed in past major releases. The objective is to give users a "
"clear rationale why a certain feature has been removed, and what "
"alternatives should be used instead."
msgstr ""

#: ../../../en/deprecations.rst:16
msgid "Deprecated Features"
msgstr ""

#: ../../../en/deprecations.rst:18
msgid ""
"Below is a complete list of all pytest features which are considered "
"deprecated. Using those features will issue "
":class:`~pytest.PytestWarning` or subclasses, which can be filtered using"
" :ref:`standard warning filters <warnings>`."
msgstr ""

#: ../../../en/deprecations.rst:25
msgid "Support for tests written for nose"
msgstr ""

#: ../../../en/deprecations.rst:29
msgid ""
"Support for running tests written for `nose "
"<https://nose.readthedocs.io/en/latest/>`__ is now deprecated."
msgstr ""

#: ../../../en/deprecations.rst:31
msgid ""
"``nose`` has been in maintenance mode-only for years, and maintaining the"
" plugin is not trivial as it spills over the code base (see :issue:`9886`"
" for more details)."
msgstr ""

#: ../../../en/deprecations.rst:35
msgid "setup/teardown"
msgstr ""

#: ../../../en/deprecations.rst:37
msgid ""
"One thing that might catch users by surprise is that plain ``setup`` and "
"``teardown`` methods are not pytest native, they are in fact part of the "
"``nose`` support."
msgstr ""

#: ../../../en/deprecations.rst:58
msgid ""
"Native pytest support uses ``setup_method`` and ``teardown_method`` (see "
":ref:`xunit-method-setup`), so the above should be changed to:"
msgstr ""

#: ../../../en/deprecations.rst:76
msgid "This is easy to do in an entire code base by doing a simple find/replace."
msgstr ""

#: ../../../en/deprecations.rst:79
msgid "@with_setup"
msgstr ""

#: ../../../en/deprecations.rst:81
msgid "Code using `@with_setup <with-setup-nose>`_ such as this:"
msgstr ""

#: ../../../en/deprecations.rst:100
msgid ""
"Will also need to be ported to a supported pytest style. One way to do it"
" is using a fixture:"
msgstr ""

#: ../../../en/deprecations.rst:131
msgid "The ``pytest.Instance`` collector"
msgstr ""

#: ../../../en/deprecations.rst:135
msgid "The ``pytest.Instance`` collector type has been removed."
msgstr ""

#: ../../../en/deprecations.rst:137
msgid ""
"Previously, Python test methods were collected as :class:`~pytest.Class` "
"-> ``Instance`` -> :class:`~pytest.Function`. Now :class:`~pytest.Class` "
"collects the test methods directly."
msgstr ""

#: ../../../en/deprecations.rst:140
msgid ""
"Most plugins which reference ``Instance`` do so in order to ignore or "
"skip it, using a check such as ``if isinstance(node, Instance): return``."
" Such plugins should simply remove consideration of ``Instance`` on "
"pytest>=7. However, to keep such uses working, a dummy type has been "
"instanted in ``pytest.Instance`` and ``_pytest.python.Instance``, and "
"importing it emits a deprecation warning. This will be removed in pytest "
"8."
msgstr ""

#: ../../../en/deprecations.rst:150
msgid "``fspath`` argument for Node constructors replaced with ``pathlib.Path``"
msgstr ""

#: ../../../en/deprecations.rst:154
msgid ""
"In order to support the transition from ``py.path.local`` to "
":mod:`pathlib`, the ``fspath`` argument to :class:`~_pytest.nodes.Node` "
"constructors like :func:`pytest.Function.from_parent()` and "
":func:`pytest.Class.from_parent()` is now deprecated."
msgstr ""

#: ../../../en/deprecations.rst:159
msgid ""
"Plugins which construct nodes should pass the ``path`` argument, of type "
":class:`pathlib.Path`, instead of the ``fspath`` argument."
msgstr ""

#: ../../../en/deprecations.rst:162
msgid ""
"Plugins which implement custom items and collectors are encouraged to "
"replace ``fspath`` parameters (``py.path.local``) with ``path`` "
"parameters (``pathlib.Path``), and drop any other usage of the ``py`` "
"library if possible."
msgstr ""

#: ../../../en/deprecations.rst:166
msgid ""
"If possible, plugins with custom items should use :ref:`cooperative "
"constructors <uncooperative-constructors-deprecated>` to avoid hardcoding"
" arguments they only pass on to the superclass."
msgstr ""

#: ../../../en/deprecations.rst:171
msgid ""
"The name of the :class:`~_pytest.nodes.Node` arguments and attributes "
"(the new attribute being ``path``) is **the opposite** of the situation "
"for hooks, :ref:`outlined below <legacy-path-hooks-deprecated>` (the old "
"argument being ``path``)."
msgstr ""

#: ../../../en/deprecations.rst:176 ../../../en/deprecations.rst:253
msgid ""
"This is an unfortunate artifact due to historical reasons, which should "
"be resolved in future versions as we slowly get rid of the :pypi:`py` "
"dependency (see :issue:`9283` for a longer discussion)."
msgstr ""

#: ../../../en/deprecations.rst:180
msgid ""
"Due to the ongoing migration of methods like "
":meth:`~_pytest.Item.reportinfo` which still is expected to return a "
"``py.path.local`` object, nodes still have both ``fspath`` "
"(``py.path.local``) and ``path`` (``pathlib.Path``) attributes, no matter"
" what argument was used in the constructor. We expect to deprecate the "
"``fspath`` attribute in a future release."
msgstr ""

#: ../../../en/deprecations.rst:189
msgid "Configuring hook specs/impls using markers"
msgstr ""

#: ../../../en/deprecations.rst:191
msgid ""
"Before pluggy, pytest's plugin library, was its own package and had a "
"clear API, pytest just used ``pytest.mark`` to configure hooks."
msgstr ""

#: ../../../en/deprecations.rst:194
msgid ""
"The :py:func:`pytest.hookimpl` and :py:func:`pytest.hookspec` decorators "
"have been available since years and should be used instead."
msgstr ""

#: ../../../en/deprecations.rst:211
msgid "should be changed to:"
msgstr ""

#: ../../../en/deprecations.rst:219
msgid "Changed ``hookimpl`` attributes:"
msgstr ""

#: ../../../en/deprecations.rst:221
msgid "``tryfirst``"
msgstr ""

#: ../../../en/deprecations.rst:222
msgid "``trylast``"
msgstr ""

#: ../../../en/deprecations.rst:223
msgid "``optionalhook``"
msgstr ""

#: ../../../en/deprecations.rst:224
msgid "``hookwrapper``"
msgstr ""

#: ../../../en/deprecations.rst:226
msgid "Changed ``hookwrapper`` attributes:"
msgstr ""

#: ../../../en/deprecations.rst:228
msgid "``firstresult``"
msgstr ""

#: ../../../en/deprecations.rst:229
msgid "``historic``"
msgstr ""

#: ../../../en/deprecations.rst:233
msgid "``py.path.local`` arguments for hooks replaced with ``pathlib.Path``"
msgstr ""

#: ../../../en/deprecations.rst:237
msgid ""
"In order to support the transition from ``py.path.local`` to "
":mod:`pathlib`, the following hooks now receive additional arguments:"
msgstr ""

#: ../../../en/deprecations.rst:239
msgid ""
":hook:`pytest_ignore_collect(collection_path: pathlib.Path) "
"<pytest_ignore_collect>` as equivalent to ``path``"
msgstr ""

#: ../../../en/deprecations.rst:240
msgid ""
":hook:`pytest_collect_file(file_path: pathlib.Path) "
"<pytest_collect_file>` as equivalent to ``path``"
msgstr ""

#: ../../../en/deprecations.rst:241
msgid ""
":hook:`pytest_pycollect_makemodule(module_path: pathlib.Path) "
"<pytest_pycollect_makemodule>` as equivalent to ``path``"
msgstr ""

#: ../../../en/deprecations.rst:242
msgid ""
":hook:`pytest_report_header(start_path: pathlib.Path) "
"<pytest_report_header>` as equivalent to ``startdir``"
msgstr ""

#: ../../../en/deprecations.rst:243
msgid ""
":hook:`pytest_report_collectionfinish(start_path: pathlib.Path) "
"<pytest_report_collectionfinish>` as equivalent to ``startdir``"
msgstr ""

#: ../../../en/deprecations.rst:245
msgid ""
"The accompanying ``py.path.local`` based paths have been deprecated: "
"plugins which manually invoke those hooks should only pass the new "
"``pathlib.Path`` arguments, and users should change their hook "
"implementations to use the new ``pathlib.Path`` arguments."
msgstr ""

#: ../../../en/deprecations.rst:248
msgid ""
"The name of the :class:`~_pytest.nodes.Node` arguments and attributes, "
":ref:`outlined above <node-ctor-fspath-deprecation>` (the new attribute "
"being ``path``) is **the opposite** of the situation for hooks (the old "
"argument being ``path``)."
msgstr ""

#: ../../../en/deprecations.rst:258
msgid "Directly constructing internal classes"
msgstr ""

#: ../../../en/deprecations.rst:262
msgid "Directly constructing the following classes is now deprecated:"
msgstr ""

#: ../../../en/deprecations.rst:264
msgid "``_pytest.mark.structures.Mark``"
msgstr ""

#: ../../../en/deprecations.rst:265
msgid "``_pytest.mark.structures.MarkDecorator``"
msgstr ""

#: ../../../en/deprecations.rst:266
msgid "``_pytest.mark.structures.MarkGenerator``"
msgstr ""

#: ../../../en/deprecations.rst:267
msgid "``_pytest.python.Metafunc``"
msgstr ""

#: ../../../en/deprecations.rst:268
msgid "``_pytest.runner.CallInfo``"
msgstr ""

#: ../../../en/deprecations.rst:269
msgid "``_pytest._code.ExceptionInfo``"
msgstr ""

#: ../../../en/deprecations.rst:270
msgid "``_pytest.config.argparsing.Parser``"
msgstr ""

#: ../../../en/deprecations.rst:271
msgid "``_pytest.config.argparsing.OptionGroup``"
msgstr ""

#: ../../../en/deprecations.rst:272
msgid "``_pytest.pytester.HookRecorder``"
msgstr ""

#: ../../../en/deprecations.rst:274
msgid ""
"These constructors have always been considered private, but now issue a "
"deprecation warning, which may become a hard error in pytest 8."
msgstr ""

#: ../../../en/deprecations.rst:279
msgid "Passing ``msg=`` to ``pytest.skip``, ``pytest.fail`` or ``pytest.exit``"
msgstr ""

#: ../../../en/deprecations.rst:283
msgid ""
"Passing the keyword argument ``msg`` to :func:`pytest.skip`, "
":func:`pytest.fail` or :func:`pytest.exit` is now deprecated and "
"``reason`` should be used instead.  This change is to bring consistency "
"between these functions and the ``@pytest.mark.skip`` and "
"``@pytest.mark.xfail`` markers which already accept a ``reason`` "
"argument."
msgstr ""

#: ../../../en/deprecations.rst:311
msgid "Implementing the ``pytest_cmdline_preparse`` hook"
msgstr ""

#: ../../../en/deprecations.rst:315
msgid ""
"Implementing the :hook:`pytest_cmdline_preparse` hook has been officially"
" deprecated. Implement the :hook:`pytest_load_initial_conftests` hook "
"instead."
msgstr ""

#: ../../../en/deprecations.rst:335
msgid ""
"Diamond inheritance between :class:`pytest.Collector` and "
":class:`pytest.Item`"
msgstr ""

#: ../../../en/deprecations.rst:339
msgid ""
"Defining a custom pytest node type which is both an :class:`pytest.Item "
"<Item>` and a :class:`pytest.Collector <Collector>` (e.g. "
":class:`pytest.File <File>`) now issues a warning. It was never sanely "
"supported and triggers hard to debug errors."
msgstr ""

#: ../../../en/deprecations.rst:342
msgid ""
"Some plugins providing linting/code analysis have been using this as a "
"hack. Instead, a separate collector node should be used, which collects "
"the item. See :ref:`non-python tests` for an example, as well as an "
"`example pr fixing inheritance`_."
msgstr ""

#: ../../../en/deprecations.rst:352
msgid ""
"Constructors of custom :class:`pytest.Node` subclasses should take "
"``**kwargs``"
msgstr ""

#: ../../../en/deprecations.rst:356
msgid ""
"If custom subclasses of nodes like :class:`pytest.Item` override the "
"``__init__`` method, they should take ``**kwargs``. Thus,"
msgstr ""

#: ../../../en/deprecations.rst:366
msgid "should be turned into:"
msgstr ""

#: ../../../en/deprecations.rst:375
msgid ""
"to avoid hard-coding the arguments pytest can pass to the superclass. See"
" :ref:`non-python tests` for a full example."
msgstr ""

#: ../../../en/deprecations.rst:378
msgid ""
"For cases without conflicts, no deprecation warning is emitted. For cases"
" with conflicts (such as :class:`pytest.File` now taking ``path`` instead"
" of ``fspath``, as :ref:`outlined above <node-ctor-fspath-deprecation>`),"
" a deprecation warning is now raised."
msgstr ""

#: ../../../en/deprecations.rst:384
msgid "Backward compatibilities in ``Parser.addoption``"
msgstr ""

#: ../../../en/deprecations.rst:388
msgid ""
"Several behaviors of :meth:`Parser.addoption <pytest.Parser.addoption>` "
"are now scheduled for removal in pytest 8 (deprecated since pytest "
"2.4.0):"
msgstr ""

#: ../../../en/deprecations.rst:391
#, python-format
msgid ""
"``parser.addoption(..., help=\".. %default ..\")`` - use ``%(default)s`` "
"instead."
msgstr ""

#: ../../../en/deprecations.rst:392
msgid ""
"``parser.addoption(..., type=\"int/string/float/complex\")`` - use "
"``type=int`` etc. instead."
msgstr ""

#: ../../../en/deprecations.rst:396
msgid "Using ``pytest.warns(None)``"
msgstr ""

#: ../../../en/deprecations.rst:400
msgid ""
":func:`pytest.warns(None) <pytest.warns>` is now deprecated because it "
"was frequently misused. Its correct usage was checking that the code "
"emits at least one warning of any type - like ``pytest.warns()`` or "
"``pytest.warns(Warning)``."
msgstr ""

#: ../../../en/deprecations.rst:404
msgid "See :ref:`warns use cases` for examples."
msgstr ""

#: ../../../en/deprecations.rst:408
msgid "Returning non-None value in test functions"
msgstr ""

#: ../../../en/deprecations.rst:412
msgid ""
"A :class:`pytest.PytestReturnNotNoneWarning` is now emitted if a test "
"function returns something other than `None`."
msgstr ""

#: ../../../en/deprecations.rst:414
msgid ""
"This prevents a common mistake among beginners that expect that returning"
" a `bool` would cause a test to pass or fail, for example:"
msgstr ""

#: ../../../en/deprecations.rst:429
msgid ""
"Given that pytest ignores the return value, this might be surprising that"
" it will never fail."
msgstr ""

#: ../../../en/deprecations.rst:431
msgid "The proper fix is to change the `return` to an `assert`:"
msgstr ""

#: ../../../en/deprecations.rst:448
msgid "The ``--strict`` command-line option"
msgstr ""

#: ../../../en/deprecations.rst:452
msgid ""
"The ``--strict`` command-line option has been deprecated in favor of "
"``--strict-markers``, which better conveys what the option does."
msgstr ""

#: ../../../en/deprecations.rst:455
msgid ""
"We have plans to maybe in the future to reintroduce ``--strict`` and make"
" it an encompassing flag for all strictness related options (``--strict-"
"markers`` and ``--strict-config`` at the moment, more might be introduced"
" in the future)."
msgstr ""

#: ../../../en/deprecations.rst:461
msgid "The ``yield_fixture`` function/decorator"
msgstr ""

#: ../../../en/deprecations.rst:465
msgid "``pytest.yield_fixture`` is a deprecated alias for :func:`pytest.fixture`."
msgstr ""

#: ../../../en/deprecations.rst:467
msgid "It has been so for a very long time, so can be search/replaced safely."
msgstr ""

#: ../../../en/deprecations.rst:471
msgid "Removed Features"
msgstr ""

#: ../../../en/deprecations.rst:473
msgid ""
"As stated in our :ref:`backwards-compatibility` policy, deprecated "
"features are removed only in major releases after an appropriate period "
"of deprecation has passed."
msgstr ""

#: ../../../en/deprecations.rst:478
msgid "The ``pytest.collect`` module"
msgstr ""

#: ../../../en/deprecations.rst:483
msgid ""
"The ``pytest.collect`` module is no longer part of the public API, all "
"its names should now be imported from ``pytest`` directly instead."
msgstr ""

#: ../../../en/deprecations.rst:489
msgid "The ``pytest_warning_captured`` hook"
msgstr ""

#: ../../../en/deprecations.rst:494
msgid ""
"This hook has an `item` parameter which cannot be serialized by ``pytest-"
"xdist``."
msgstr ""

#: ../../../en/deprecations.rst:496
msgid ""
"Use the ``pytest_warning_recorded`` hook instead, which replaces the "
"``item`` parameter by a ``nodeid`` parameter."
msgstr ""

#: ../../../en/deprecations.rst:502
msgid "The ``pytest._fillfuncargs`` function"
msgstr ""

#: ../../../en/deprecations.rst:507
msgid "This function was kept for backward compatibility with an older plugin."
msgstr ""

#: ../../../en/deprecations.rst:509
msgid ""
"It's functionality is not meant to be used directly, but if you must "
"replace it, use `function._request._fillfixtures()` instead, though note "
"this is not a public API and may break in the future."
msgstr ""

#: ../../../en/deprecations.rst:515
msgid "``--no-print-logs`` command-line option"
msgstr ""

#: ../../../en/deprecations.rst:521
msgid ""
"The ``--no-print-logs`` option and ``log_print`` ini setting are removed."
" If you used them, please use ``--show-capture`` instead."
msgstr ""

#: ../../../en/deprecations.rst:524
msgid ""
"A ``--show-capture`` command-line option was added in ``pytest 3.5.0`` "
"which allows to specify how to display captured output when tests fail: "
"``no``, ``stdout``, ``stderr``, ``log`` or ``all`` (the default)."
msgstr ""

#: ../../../en/deprecations.rst:531
msgid "Result log (``--result-log``)"
msgstr ""

#: ../../../en/deprecations.rst:536
msgid ""
"The ``--result-log`` option produces a stream of test reports which can "
"be analysed at runtime, but it uses a custom format which requires users "
"to implement their own parser."
msgstr ""

#: ../../../en/deprecations.rst:540
msgid ""
"The  `pytest-reportlog <https://github.com/pytest-dev/pytest-"
"reportlog>`__ plugin provides a ``--report-log`` option, a more standard "
"and extensible alternative, producing one JSON object per-line, and "
"should cover the same use cases. Please try it out and provide feedback."
msgstr ""

#: ../../../en/deprecations.rst:543
msgid ""
"The ``pytest-reportlog`` plugin might even be merged into the core at "
"some point, depending on the plans for the plugins and number of users "
"using it."
msgstr ""

#: ../../../en/deprecations.rst:547
msgid "``pytest_collect_directory`` hook"
msgstr ""

#: ../../../en/deprecations.rst:551
msgid ""
"The ``pytest_collect_directory`` hook has not worked properly for years "
"(it was called but the results were ignored). Users may consider using "
":hook:`pytest_collection_modifyitems` instead."
msgstr ""

#: ../../../en/deprecations.rst:555
msgid "TerminalReporter.writer"
msgstr ""

#: ../../../en/deprecations.rst:559
msgid ""
"The ``TerminalReporter.writer`` attribute has been deprecated and should "
"no longer be used. This was inadvertently exposed as part of the public "
"API of that plugin and ties it too much with ``py.io.TerminalWriter``."
msgstr ""

#: ../../../en/deprecations.rst:563
msgid ""
"Plugins that used ``TerminalReporter.writer`` directly should instead use"
" ``TerminalReporter`` methods that provide the same functionality."
msgstr ""

#: ../../../en/deprecations.rst:569
msgid "``junit_family`` default value change to \"xunit2\""
msgstr ""

#: ../../../en/deprecations.rst:573
msgid ""
"The default value of ``junit_family`` option will change to ``xunit2`` in"
" pytest 6.0, which is an update of the old ``xunit1`` format and is "
"supported by default in modern tools that manipulate this type of file "
"(for example, Jenkins, Azure Pipelines, etc.)."
msgstr ""

#: ../../../en/deprecations.rst:577
msgid ""
"Users are recommended to try the new ``xunit2`` format and see if their "
"tooling that consumes the JUnit XML file supports it."
msgstr ""

#: ../../../en/deprecations.rst:580
msgid "To use the new format, update your ``pytest.ini``:"
msgstr ""

#: ../../../en/deprecations.rst:587
msgid ""
"If you discover that your tooling does not support the new format, and "
"want to keep using the legacy version, set the option to ``legacy`` "
"instead:"
msgstr ""

#: ../../../en/deprecations.rst:595
msgid ""
"By using ``legacy`` you will keep using the legacy/xunit1 format when "
"upgrading to pytest 6.0, where the default format will be ``xunit2``."
msgstr ""

#: ../../../en/deprecations.rst:598
msgid ""
"In order to let users know about the transition, pytest will issue a "
"warning in case the ``--junitxml`` option is given in the command line "
"but ``junit_family`` is not explicitly configured in ``pytest.ini``."
msgstr ""

#: ../../../en/deprecations.rst:602
msgid "Services known to support the ``xunit2`` format:"
msgstr ""

#: ../../../en/deprecations.rst:604
msgid ""
"`Jenkins <https://www.jenkins.io/>`__ with the `JUnit "
"<https://plugins.jenkins.io/junit>`__ plugin."
msgstr ""

#: ../../../en/deprecations.rst:605
msgid ""
"`Azure Pipelines <https://azure.microsoft.com/en-"
"us/services/devops/pipelines>`__."
msgstr ""

#: ../../../en/deprecations.rst:608
msgid "Node Construction changed to ``Node.from_parent``"
msgstr ""

#: ../../../en/deprecations.rst:612
msgid ""
"The construction of nodes now should use the named constructor "
"``from_parent``. This limitation in api surface intends to enable "
"better/simpler refactoring of the collection tree."
msgstr ""

#: ../../../en/deprecations.rst:615
msgid ""
"This means that instead of :code:`MyItem(name=\"foo\", parent=collector, "
"obj=42)` one now has to invoke :code:`MyItem.from_parent(collector, "
"name=\"foo\")`."
msgstr ""

#: ../../../en/deprecations.rst:618
msgid ""
"Plugins that wish to support older versions of pytest and suppress the "
"warning can use `hasattr` to check if `from_parent` exists in that "
"version:"
msgstr ""

#: ../../../en/deprecations.rst:631
msgid ""
"Note that ``from_parent`` should only be called with keyword arguments "
"for the parameters."
msgstr ""

#: ../../../en/deprecations.rst:635
msgid "``pytest.fixture`` arguments are keyword only"
msgstr ""

#: ../../../en/deprecations.rst:639
msgid ""
"Passing arguments to pytest.fixture() as positional arguments has been "
"removed - pass them by keyword instead."
msgstr ""

#: ../../../en/deprecations.rst:642
msgid "``funcargnames`` alias for ``fixturenames``"
msgstr ""

#: ../../../en/deprecations.rst:646
msgid ""
"The ``FixtureRequest``, ``Metafunc``, and ``Function`` classes track the "
"names of their associated fixtures, with the aptly-named ``fixturenames``"
" attribute."
msgstr ""

#: ../../../en/deprecations.rst:649
msgid ""
"Prior to pytest 2.3, this attribute was named ``funcargnames``, and we "
"have kept that as an alias since.  It is finally due for removal, as it "
"is often confusing in places where we or plugin authors must distinguish "
"between fixture names and names supplied by non-fixture things such as "
"``pytest.mark.parametrize``."
msgstr ""

#: ../../../en/deprecations.rst:658
msgid "``pytest.config`` global"
msgstr ""

#: ../../../en/deprecations.rst:662
msgid ""
"The ``pytest.config`` global object is deprecated.  Instead use "
"``request.config`` (via the ``request`` fixture) or if you are a plugin "
"author use the ``pytest_configure(config)`` hook. Note that many hooks "
"can also access the ``config`` object indirectly, through "
"``session.config`` or ``item.config`` for example."
msgstr ""

#: ../../../en/deprecations.rst:671
msgid "``\"message\"`` parameter of ``pytest.raises``"
msgstr ""

#: ../../../en/deprecations.rst:675
msgid ""
"It is a common mistake to think this parameter will match the exception "
"message, while in fact it only serves to provide a custom message in case"
" the ``pytest.raises`` check fails. To prevent users from making this "
"mistake, and because it is believed to be little used, pytest is "
"deprecating it without providing an alternative for the moment."
msgstr ""

#: ../../../en/deprecations.rst:680
msgid ""
"If you have a valid use case for this parameter, consider that to obtain "
"the same results you can just call ``pytest.fail`` manually at the end of"
" the ``with`` statement."
msgstr ""

#: ../../../en/deprecations.rst:683 ../../../en/deprecations.rst:996
msgid "For example:"
msgstr ""

#: ../../../en/deprecations.rst:691 ../../../en/deprecations.rst:724
#: ../../../en/deprecations.rst:855 ../../../en/deprecations.rst:925
msgid "Becomes:"
msgstr ""

#: ../../../en/deprecations.rst:700
msgid ""
"If you still have concerns about this deprecation and future removal, "
"please comment on :issue:`3974`."
msgstr ""

#: ../../../en/deprecations.rst:707
msgid "``raises`` / ``warns`` with a string as the second argument"
msgstr ""

#: ../../../en/deprecations.rst:711
msgid ""
"Use the context manager form of these instead.  When necessary, invoke "
"``exec`` directly."
msgstr ""

#: ../../../en/deprecations.rst:714 ../../../en/deprecations.rst:847
#: ../../../en/deprecations.rst:872
msgid "Example:"
msgstr ""

#: ../../../en/deprecations.rst:742
msgid "Using ``Class`` in custom Collectors"
msgstr ""

#: ../../../en/deprecations.rst:746
msgid ""
"Using objects named ``\"Class\"`` as a way to customize the type of nodes"
" that are collected in ``Collector`` subclasses has been deprecated. "
"Users instead should use ``pytest_pycollect_makeitem`` to customize node "
"types during collection."
msgstr ""

#: ../../../en/deprecations.rst:750
msgid ""
"This issue should affect only advanced plugins who create new collection "
"types, so if you see this warning message please contact the authors so "
"they can change the code."
msgstr ""

#: ../../../en/deprecations.rst:757
msgid "marks in ``pytest.mark.parametrize``"
msgstr ""

#: ../../../en/deprecations.rst:761
msgid ""
"Applying marks to values of a ``pytest.mark.parametrize`` call is now "
"deprecated. For example:"
msgstr ""

#: ../../../en/deprecations.rst:779
msgid ""
"This code applies the ``pytest.mark.xfail(reason=\"flaky\")`` mark to the"
" ``(6, 36)`` value of the above parametrization call."
msgstr ""

#: ../../../en/deprecations.rst:782
msgid ""
"This was considered hard to read and understand, and also its "
"implementation presented problems to the code preventing further internal"
" improvements in the marks architecture."
msgstr ""

#: ../../../en/deprecations.rst:785
msgid "To update the code, use ``pytest.param``:"
msgstr ""

#: ../../../en/deprecations.rst:807
msgid "``pytest_funcarg__`` prefix"
msgstr ""

#: ../../../en/deprecations.rst:811
msgid ""
"In very early pytest versions fixtures could be defined using the "
"``pytest_funcarg__`` prefix:"
msgstr ""

#: ../../../en/deprecations.rst:818
msgid "Switch over to the ``@pytest.fixture`` decorator:"
msgstr ""

#: ../../../en/deprecations.rst:829
msgid "[pytest] section in setup.cfg files"
msgstr ""

#: ../../../en/deprecations.rst:833
msgid ""
"``[pytest]`` sections in ``setup.cfg`` files should now be named "
"``[tool:pytest]`` to avoid conflicts with other distutils commands."
msgstr ""

#: ../../../en/deprecations.rst:840
msgid "Metafunc.addcall"
msgstr ""

#: ../../../en/deprecations.rst:844
msgid ""
"``Metafunc.addcall`` was a precursor to the current parametrized "
"mechanism. Users should use :meth:`pytest.Metafunc.parametrize` instead."
msgstr ""

#: ../../../en/deprecations.rst:866
msgid "``cached_setup``"
msgstr ""

#: ../../../en/deprecations.rst:870
msgid ""
"``request.cached_setup`` was the precursor of the setup/teardown "
"mechanism available to fixtures."
msgstr ""

#: ../../../en/deprecations.rst:882
msgid "This should be updated to make use of standard fixture mechanisms:"
msgstr ""

#: ../../../en/deprecations.rst:893
msgid ""
"You can consult :std:doc:`funcarg comparison section in the docs "
"<funcarg_compare>` for more information."
msgstr ""

#: ../../../en/deprecations.rst:900
msgid "pytest_plugins in non-top-level conftest files"
msgstr ""

#: ../../../en/deprecations.rst:904
msgid ""
"Defining :globalvar:`pytest_plugins` is now deprecated in non-top-level "
"conftest.py files because they will activate referenced plugins "
"*globally*, which is surprising because for all other pytest features "
"``conftest.py`` files are only *active* for tests at or below it."
msgstr ""

#: ../../../en/deprecations.rst:912
msgid "``Config.warn`` and ``Node.warn``"
msgstr ""

#: ../../../en/deprecations.rst:916
msgid ""
"Those methods were part of the internal pytest warnings system, but since"
" ``3.8`` pytest is using the builtin warning system for its own warnings,"
" so those two functions are now deprecated."
msgstr ""

#: ../../../en/deprecations.rst:919
msgid ""
"``Config.warn`` should be replaced by calls to the standard "
"``warnings.warn``, example:"
msgstr ""

#: ../../../en/deprecations.rst:931
msgid "``Node.warn`` now supports two signatures:"
msgstr ""

#: ../../../en/deprecations.rst:933
msgid ""
"``node.warn(PytestWarning(\"some message\"))``: is now the "
"**recommended** way to call this function. The warning instance must be a"
" PytestWarning or subclass."
msgstr ""

#: ../../../en/deprecations.rst:936
msgid ""
"``node.warn(\"CI\", \"some message\")``: this code/message form has been "
"**removed** and should be converted to the warning instance form above."
msgstr ""

#: ../../../en/deprecations.rst:941
msgid "record_xml_property"
msgstr ""

#: ../../../en/deprecations.rst:945
msgid ""
"The ``record_xml_property`` fixture is now deprecated in favor of the "
"more generic ``record_property``, which can be used by other consumers "
"(for example ``pytest-html``) to obtain custom information about the test"
" run."
msgstr ""

#: ../../../en/deprecations.rst:948
msgid "This is just a matter of renaming the fixture as the API is the same:"
msgstr ""

#: ../../../en/deprecations.rst:955
msgid "Change to:"
msgstr ""

#: ../../../en/deprecations.rst:966
msgid "Passing command-line string to ``pytest.main()``"
msgstr ""

#: ../../../en/deprecations.rst:970
msgid "Passing a command-line string to ``pytest.main()`` is deprecated:"
msgstr ""

#: ../../../en/deprecations.rst:976
msgid "Pass a list instead:"
msgstr ""

#: ../../../en/deprecations.rst:983
msgid ""
"By passing a string, users expect that pytest will interpret that "
"command-line using the shell rules they are working on (for example "
"``bash`` or ``Powershell``), but this is very hard/impossible to do in a "
"portable way."
msgstr ""

#: ../../../en/deprecations.rst:990
msgid "Calling fixtures directly"
msgstr ""

#: ../../../en/deprecations.rst:994
msgid ""
"Calling a fixture function directly, as opposed to request them in a test"
" function, is deprecated."
msgstr ""

#: ../../../en/deprecations.rst:1011
msgid ""
"This is a great source of confusion to new users, which will often call "
"the fixture functions and request them from test functions "
"interchangeably, which breaks the fixture resolution model."
msgstr ""

#: ../../../en/deprecations.rst:1013
msgid ""
"In those cases just request the function directly in the dependent "
"fixture:"
msgstr ""

#: ../../../en/deprecations.rst:1027
msgid ""
"Alternatively if the fixture function is called multiple times inside a "
"test (making it hard to apply the above pattern) or if you would like to "
"make minimal changes to the code, you can create a fixture which calls "
"the original function together with the ``name`` parameter:"
msgstr ""

#: ../../../en/deprecations.rst:1045
msgid "``yield`` tests"
msgstr ""

#: ../../../en/deprecations.rst:1049
msgid ""
"pytest supported ``yield``-style tests, where a test function actually "
"``yield`` functions and values that are then turned into proper test "
"methods. Example:"
msgstr ""

#: ../../../en/deprecations.rst:1062
msgid "This would result into two actual test functions being generated."
msgstr ""

#: ../../../en/deprecations.rst:1064
msgid ""
"This form of test function doesn't support fixtures properly, and users "
"should switch to ``pytest.mark.parametrize``:"
msgstr ""

#: ../../../en/deprecations.rst:1075
msgid "Internal classes accessed through ``Node``"
msgstr ""

#: ../../../en/deprecations.rst:1079
msgid ""
"Access of ``Module``, ``Function``, ``Class``, ``Instance``, ``File`` and"
" ``Item`` through ``Node`` instances now issue this warning:"
msgstr ""

#: ../../../en/deprecations.rst:1086
msgid ""
"Users should just ``import pytest`` and access those objects using the "
"``pytest`` module."
msgstr ""

#: ../../../en/deprecations.rst:1088
msgid ""
"This has been documented as deprecated for years, but only now we are "
"actually emitting deprecation warnings."
msgstr ""

#: ../../../en/deprecations.rst:1091
msgid "``Node.get_marker``"
msgstr ""

#: ../../../en/deprecations.rst:1095
msgid ""
"As part of a large :ref:`marker-revamp`, "
"``_pytest.nodes.Node.get_marker`` is removed. See :ref:`the documentation"
" <update marker code>` on tips on how to update your code."
msgstr ""

#: ../../../en/deprecations.rst:1100
msgid "``somefunction.markname``"
msgstr ""

#: ../../../en/deprecations.rst:1104
msgid ""
"As part of a large :ref:`marker-revamp` we already deprecated using "
"``MarkInfo`` the only correct way to get markers of an element is via "
"``node.iter_markers(name)``."
msgstr ""

#: ../../../en/deprecations.rst:1111
msgid "``pytest_namespace``"
msgstr ""

#: ../../../en/deprecations.rst:1115
msgid ""
"This hook is deprecated because it greatly complicates the pytest "
"internals regarding configuration and initialization, making some bug "
"fixes and refactorings impossible."
msgstr ""

#: ../../../en/deprecations.rst:1118
msgid "Example of usage:"
msgstr ""

#: ../../../en/deprecations.rst:1130
msgid ""
"Plugin authors relying on this hook should instead require that users now"
" import the plugin modules directly (with an appropriate public API)."
msgstr ""

#: ../../../en/deprecations.rst:1132
msgid ""
"As a stopgap measure, plugin authors may still inject their names into "
"pytest's namespace, usually during ``pytest_configure``:"
msgstr ""

