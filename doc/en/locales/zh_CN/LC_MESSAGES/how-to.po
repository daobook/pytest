# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 7.1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-12 11:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../../en/how-to/assert.rst:4
msgid "How to write and report assertions in tests"
msgstr ""

#: ../../../en/how-to/assert.rst:9
msgid "Asserting with the ``assert`` statement"
msgstr ""

#: ../../../en/how-to/assert.rst:11
msgid ""
"``pytest`` allows you to use the standard Python ``assert`` for verifying"
" expectations and values in Python tests.  For example, you can write the"
" following:"
msgstr ""

#: ../../../en/how-to/assert.rst:25
msgid ""
"to assert that your function returns a certain value. If this assertion "
"fails you will see the return value of the function call:"
msgstr ""

#: ../../../en/how-to/assert.rst:51
msgid ""
"``pytest`` has support for showing the values of the most common "
"subexpressions including calls, attributes, comparisons, and binary and "
"unary operators. (See :ref:`tbreportdemo`).  This allows you to use the "
"idiomatic python constructs without boilerplate code while not losing "
"introspection information."
msgstr ""

#: ../../../en/how-to/assert.rst:57
msgid "However, if you specify a message with the assertion like this:"
msgstr ""

#: ../../../en/how-to/assert.rst:63
msgid ""
"then no assertion introspection takes places at all and the message will "
"be simply shown in the traceback."
msgstr ""

#: ../../../en/how-to/assert.rst:66
msgid "See :ref:`assert-details` for more information on assertion introspection."
msgstr ""

#: ../../../en/how-to/assert.rst:71
msgid "Assertions about expected exceptions"
msgstr ""

#: ../../../en/how-to/assert.rst:73
msgid ""
"In order to write assertions about raised exceptions, you can use "
":func:`pytest.raises` as a context manager like this:"
msgstr ""

#: ../../../en/how-to/assert.rst:85
msgid "and if you need to have access to the actual exception info you may use:"
msgstr ""

#: ../../../en/how-to/assert.rst:98
msgid ""
"``excinfo`` is an :class:`~pytest.ExceptionInfo` instance, which is a "
"wrapper around the actual exception raised.  The main attributes of "
"interest are ``.type``, ``.value`` and ``.traceback``."
msgstr ""

#: ../../../en/how-to/assert.rst:102
msgid ""
"You can pass a ``match`` keyword parameter to the context-manager to test"
" that a regular expression matches on the string representation of an "
"exception (similar to the ``TestCase.assertRaisesRegex`` method from "
"``unittest``):"
msgstr ""

#: ../../../en/how-to/assert.rst:119
msgid ""
"The regexp parameter of the ``match`` method is matched with the "
"``re.search`` function, so in the above example ``match='123'`` would "
"have worked as well."
msgstr ""

#: ../../../en/how-to/assert.rst:123
msgid ""
"There's an alternate form of the :func:`pytest.raises` function where you"
" pass a function that will be executed with the given ``*args`` and "
"``**kwargs`` and assert that the given exception is raised:"
msgstr ""

#: ../../../en/how-to/assert.rst:131
msgid ""
"The reporter will provide you with helpful output in case of failures "
"such as *no exception* or *wrong exception*."
msgstr ""

#: ../../../en/how-to/assert.rst:134
msgid ""
"Note that it is also possible to specify a \"raises\" argument to "
"``pytest.mark.xfail``, which checks that the test is failing in a more "
"specific way than just having any exception raised:"
msgstr ""

#: ../../../en/how-to/assert.rst:144
msgid ""
"Using :func:`pytest.raises` is likely to be better for cases where you "
"are testing exceptions your own code is deliberately raising, whereas "
"using ``@pytest.mark.xfail`` with a check function is probably better for"
" something like documenting unfixed bugs (where the test describes what "
"\"should\" happen) or bugs in dependencies."
msgstr ""

#: ../../../en/how-to/assert.rst:154
msgid "Assertions about expected warnings"
msgstr ""

#: ../../../en/how-to/assert.rst:158
msgid ""
"You can check that code raises a particular warning using "
":ref:`pytest.warns <warns>`."
msgstr ""

#: ../../../en/how-to/assert.rst:165
msgid "Making use of context-sensitive comparisons"
msgstr ""

#: ../../../en/how-to/assert.rst:169
msgid ""
"``pytest`` has rich support for providing context-sensitive information "
"when it encounters comparisons.  For example:"
msgstr ""

#: ../../../en/how-to/assert.rst:180
msgid "if you run this module:"
msgstr ""

#: ../../../en/how-to/assert.rst:211
msgid "Special comparisons are done for a number of cases:"
msgstr ""

#: ../../../en/how-to/assert.rst:213
msgid "comparing long strings: a context diff is shown"
msgstr ""

#: ../../../en/how-to/assert.rst:214
msgid "comparing long sequences: first failing indices"
msgstr ""

#: ../../../en/how-to/assert.rst:215
msgid "comparing dicts: different entries"
msgstr ""

#: ../../../en/how-to/assert.rst:217
msgid "See the :ref:`reporting demo <tbreportdemo>` for many more examples."
msgstr ""

#: ../../../en/how-to/assert.rst:220
msgid "Defining your own explanation for failed assertions"
msgstr ""

#: ../../../en/how-to/assert.rst:222
msgid ""
"It is possible to add your own detailed explanations by implementing the "
"``pytest_assertrepr_compare`` hook."
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:1 of
msgid "Return explanation for comparisons in failing assert expressions."
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:3 of
msgid ""
"Return None for no custom explanation, otherwise return a list of "
"strings. The strings will be joined by newlines but any newlines *in* a "
"string will be escaped. Note that all but the first line will be indented"
" slightly, the intention is for the first line to be a summary."
msgstr ""

#: _pytest.hookspec.pytest_addhooks _pytest.hookspec.pytest_assertrepr_compare
#: of
msgid "Parameters"
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:8 of
msgid "The pytest config object."
msgstr ""

#: ../../../en/how-to/assert.rst:228
msgid ""
"As an example consider adding the following hook in a :ref:`conftest.py "
"<conftest.py>` file which provides an alternative explanation for ``Foo``"
" objects:"
msgstr ""

#: ../../../en/how-to/assert.rst:244
msgid "now, given this test module:"
msgstr ""

#: ../../../en/how-to/assert.rst:262
msgid ""
"you can run the test module and get the custom output defined in the "
"conftest file:"
msgstr ""

#: ../../../en/how-to/assert.rst:288
msgid "Assertion introspection details"
msgstr ""

#: ../../../en/how-to/assert.rst:291
msgid ""
"Reporting details about a failing assertion is achieved by rewriting "
"assert statements before they are run.  Rewritten assert statements put "
"introspection information into the assertion failure message.  ``pytest``"
" only rewrites test modules directly discovered by its test collection "
"process, so **asserts in supporting modules which are not themselves test"
" modules will not be rewritten**."
msgstr ""

#: ../../../en/how-to/assert.rst:297
msgid ""
"You can manually enable assertion rewriting for an imported module by "
"calling :ref:`register_assert_rewrite <assertion-rewriting>` before you "
"import it (a good place to do that is in your root ``conftest.py``)."
msgstr ""

#: ../../../en/how-to/assert.rst:301
msgid ""
"For further information, Benjamin Peterson wrote up `Behind the scenes of"
" pytest's new assertion rewriting <http://pybites.blogspot.com/2011/07"
"/behind-scenes-of-pytests-new-assertion.html>`_."
msgstr ""

#: ../../../en/how-to/assert.rst:304
msgid "Assertion rewriting caches files on disk"
msgstr ""

#: ../../../en/how-to/assert.rst:306
msgid ""
"``pytest`` will write back the rewritten modules to disk for caching. You"
" can disable this behavior (for example to avoid leaving stale ``.pyc`` "
"files around in projects that move files around a lot) by adding this to "
"the top of your ``conftest.py`` file:"
msgstr ""

#: ../../../en/how-to/assert.rst:316
msgid ""
"Note that you still get the benefits of assertion introspection, the only"
" change is that the ``.pyc`` files won't be cached on disk."
msgstr ""

#: ../../../en/how-to/assert.rst:319
msgid ""
"Additionally, rewriting will silently skip caching if it cannot write new"
" ``.pyc`` files, i.e. in a read-only filesystem or a zipfile."
msgstr ""

#: ../../../en/how-to/assert.rst:324
msgid "Disabling assert rewriting"
msgstr ""

#: ../../../en/how-to/assert.rst:326
msgid ""
"``pytest`` rewrites test modules on import by using an import hook to "
"write new ``pyc`` files. Most of the time this works transparently. "
"However, if you are working with the import machinery yourself, the "
"import hook may interfere."
msgstr ""

#: ../../../en/how-to/assert.rst:331
msgid "If this is the case you have two options:"
msgstr ""

#: ../../../en/how-to/assert.rst:333
msgid ""
"Disable rewriting for a specific module by adding the string "
"``PYTEST_DONT_REWRITE`` to its docstring."
msgstr ""

#: ../../../en/how-to/assert.rst:336
msgid "Disable rewriting for all modules by using ``--assert=plain``."
msgstr ""

#: ../../../en/how-to/bash-completion.rst:5
msgid "How to set up bash completion"
msgstr ""

#: ../../../en/how-to/bash-completion.rst:7
msgid ""
"When using bash as your shell, ``pytest`` can use argcomplete "
"(https://kislyuk.github.io/argcomplete/) for auto-completion. For this "
"``argcomplete`` needs to be installed **and** enabled."
msgstr ""

#: ../../../en/how-to/bash-completion.rst:11
msgid "Install argcomplete using:"
msgstr ""

#: ../../../en/how-to/bash-completion.rst:17
msgid "For global activation of all argcomplete enabled python applications run:"
msgstr ""

#: ../../../en/how-to/bash-completion.rst:23
msgid "For permanent (but not global) ``pytest`` activation, use:"
msgstr ""

#: ../../../en/how-to/bash-completion.rst:29
msgid "For one-time activation of argcomplete for ``pytest`` only, use:"
msgstr ""

#: ../../../en/how-to/cache.rst:6
msgid "How to re-run failed tests and maintain state between test runs"
msgstr ""

#: ../../../en/how-to/cache.rst:11 ../../../en/how-to/nose.rst:14
msgid "Usage"
msgstr ""

#: ../../../en/how-to/cache.rst:13
msgid ""
"The plugin provides two command line options to rerun failures from the "
"last ``pytest`` invocation:"
msgstr ""

#: ../../../en/how-to/cache.rst:16
msgid "``--lf``, ``--last-failed`` - to only re-run the failures."
msgstr ""

#: ../../../en/how-to/cache.rst:17
msgid ""
"``--ff``, ``--failed-first`` - to run the failures first and then the "
"rest of the tests."
msgstr ""

#: ../../../en/how-to/cache.rst:20
msgid ""
"For cleanup (usually not needed), a ``--cache-clear`` option allows to "
"remove all cross-session cache contents ahead of a test run."
msgstr ""

#: ../../../en/how-to/cache.rst:23
msgid ""
"Other plugins may access the `config.cache`_ object to set/get **json "
"encodable** values between ``pytest`` invocations."
msgstr ""

#: ../../../en/how-to/cache.rst:28
msgid ""
"This plugin is enabled by default, but can be disabled if needed: see "
":ref:`cmdunregister` (the internal name for this plugin is "
"``cacheprovider``)."
msgstr ""

#: ../../../en/how-to/cache.rst:34
msgid "Rerunning only failures or failures first"
msgstr ""

#: ../../../en/how-to/cache.rst:36
msgid "First, let's create 50 test invocation of which only 2 fail:"
msgstr ""

#: ../../../en/how-to/cache.rst:49
msgid "If you run this for the first time you will see two failures:"
msgstr ""

#: ../../../en/how-to/cache.rst:83
msgid "If you then run it with ``--lf``:"
msgstr ""

#: ../../../en/how-to/cache.rst:124
msgid ""
"You have run only the two failing tests from the last run, while the 48 "
"passing tests have not been run (\"deselected\")."
msgstr ""

#: ../../../en/how-to/cache.rst:127
msgid ""
"Now, if you run with the ``--ff`` option, all tests will be run but the "
"first previous failures will be executed first (as can be seen from the "
"series of ``FF`` and dots):"
msgstr ""

#: ../../../en/how-to/cache.rst:172
msgid ""
"New ``--nf``, ``--new-first`` options: run new tests first followed by "
"the rest of the tests, in both cases tests are also sorted by the file "
"modified time, with more recent files coming first."
msgstr ""

#: ../../../en/how-to/cache.rst:177
msgid "Behavior when no tests failed in the last run"
msgstr ""

#: ../../../en/how-to/cache.rst:179
msgid ""
"When no tests failed in the last run, or when no cached ``lastfailed`` "
"data was found, ``pytest`` can be configured either to run all of the "
"tests or no tests, using the ``--last-failed-no-failures`` option, which "
"takes one of the following values:"
msgstr ""

#: ../../../en/how-to/cache.rst:189
msgid "The new config.cache object"
msgstr ""

#: ../../../en/how-to/cache.rst:193
msgid ""
"Plugins or conftest.py support code can get a cached value using the "
"pytest ``config`` object.  Here is a basic example plugin which "
"implements a :ref:`fixture <fixture>` which re-uses previously created "
"state across pytest invocations:"
msgstr ""

#: ../../../en/how-to/cache.rst:221
msgid ""
"If you run this command for the first time, you can see the print "
"statement:"
msgstr ""

#: ../../../en/how-to/cache.rst:243
msgid ""
"If you run it a second time, the value will be retrieved from the cache "
"and nothing will be printed:"
msgstr ""

#: ../../../en/how-to/cache.rst:264
msgid "See the :fixture:`config.cache fixture <cache>` for more details."
msgstr ""

#: ../../../en/how-to/cache.rst:268
msgid "Inspecting Cache content"
msgstr ""

#: ../../../en/how-to/cache.rst:270
msgid ""
"You can always peek at the content of the cache using the ``--cache-"
"show`` command line option:"
msgstr ""

#: ../../../en/how-to/cache.rst:292
msgid ""
"``--cache-show`` takes an optional argument to specify a glob pattern for"
" filtering:"
msgstr ""

#: ../../../en/how-to/cache.rst:309
msgid "Clearing Cache content"
msgstr ""

#: ../../../en/how-to/cache.rst:311
msgid ""
"You can instruct pytest to clear all cache files and values by adding the"
" ``--cache-clear`` option like this:"
msgstr ""

#: ../../../en/how-to/cache.rst:318
msgid ""
"This is recommended for invocations from Continuous Integration servers "
"where isolation and correctness is more important than speed."
msgstr ""

#: ../../../en/how-to/cache.rst:326
msgid "Stepwise"
msgstr ""

#: ../../../en/how-to/cache.rst:328
msgid ""
"As an alternative to ``--lf -x``, especially for cases where you expect a"
" large part of the test suite will fail, ``--sw``, ``--stepwise`` allows "
"you to fix them one at a time. The test suite will run until the first "
"failure and then stop. At the next invocation, tests will continue from "
"the last failing test and then run until the next failing test. You may "
"use the ``--stepwise-skip`` option to ignore one failing test and stop "
"the test execution on the second failing test instead. This is useful if "
"you get stuck on a failing test and just want to ignore it until later.  "
"Providing ``--stepwise-skip`` will also enable ``--stepwise`` implicitly."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:5
msgid "How to capture stdout/stderr output"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:8
msgid "Default stdout/stderr/stdin capturing behaviour"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:10
msgid ""
"During test execution any output sent to ``stdout`` and ``stderr`` is "
"captured.  If a test or a setup method fails its according captured "
"output will usually be shown along with the failure traceback. (this "
"behavior can be configured by the ``--show-capture`` command-line "
"option)."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:15
msgid ""
"In addition, ``stdin`` is set to a \"null\" object which will fail on "
"attempts to read from it because it is rarely desired to wait for "
"interactive input when running automated tests."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:19
msgid ""
"By default capturing is done by intercepting writes to low level file "
"descriptors.  This allows to capture output from simple print statements "
"as well as output from a subprocess started by a test."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:27
msgid "Setting capturing methods or disabling capturing"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:29
msgid "There are three ways in which ``pytest`` can perform capturing:"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:31
msgid ""
"``fd`` (file descriptor) level capturing (default): All writes going to "
"the operating system file descriptors 1 and 2 will be captured."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:34
msgid ""
"``sys`` level capturing: Only writes to Python files ``sys.stdout`` and "
"``sys.stderr`` will be captured.  No capturing of writes to "
"filedescriptors is performed."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:38
msgid ""
"``tee-sys`` capturing: Python writes to ``sys.stdout`` and ``sys.stderr``"
" will be captured, however the writes will also be passed-through to the "
"actual ``sys.stdout`` and ``sys.stderr``. This allows output to be 'live "
"printed' and captured for plugin use, such as junitxml (new in pytest "
"5.4)."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:45
msgid "You can influence output capturing mechanisms from the command line:"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:58
msgid "Using print statements for debugging"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:60
msgid ""
"One primary benefit of the default capturing of stdout/stderr output is "
"that you can use print statements for debugging:"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:79
msgid ""
"and running this module will show you precisely the output of the failing"
" function and hide the other one:"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:107
msgid "Accessing captured output from a test function"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:109
msgid ""
"The ``capsys``, ``capsysbinary``, ``capfd``, and ``capfdbinary`` fixtures"
" allow access to stdout/stderr output created during test execution.  "
"Here is an example test function that performs some output related "
"checks:"
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:125
msgid ""
"The ``readouterr()`` call snapshots the output so far - and capturing "
"will be continued.  After the test function finishes the original streams"
" will be restored.  Using ``capsys`` this way frees your test from having"
" to care about setting/resetting output streams and also interacts well "
"with pytest's own per-test capturing."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:133
msgid ""
"If you want to capture on filedescriptor level you can use the ``capfd`` "
"fixture which offers the exact same interface but allows to also capture "
"output from libraries or subprocesses that directly write to operating "
"system level output streams (FD1 and FD2)."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:141
msgid ""
"The return value from ``readouterr`` changed to a ``namedtuple`` with two"
" attributes, ``out`` and ``err``."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:145
msgid ""
"If the code under test writes non-textual data, you can capture this "
"using the ``capsysbinary`` fixture which instead returns ``bytes`` from "
"the ``readouterr`` method."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:152
msgid ""
"If the code under test writes non-textual data, you can capture this "
"using the ``capfdbinary`` fixture which instead returns ``bytes`` from "
"the ``readouterr`` method.  The ``capfdbinary`` fixture operates on the "
"filedescriptor level."
msgstr ""

#: ../../../en/how-to/capture-stdout-stderr.rst:160
msgid ""
"To temporarily disable capture within a test, both ``capsys`` and "
"``capfd`` have a ``disabled()`` method that can be used as a context "
"manager, disabling capture inside the ``with`` block:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:4
msgid "How to capture warnings"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:8
msgid ""
"Starting from version ``3.1``, pytest now automatically catches warnings "
"during test execution and displays them at the end of the session:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:25
msgid "Running pytest now produces this output:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:48
msgid "Controlling warnings"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:50
msgid ""
"Similar to Python's `warning filter`_ and :option:`-W option <python:-W>`"
" flag, pytest provides its own ``-W`` flag to control which warnings are "
"ignored, displayed, or turned into errors. See the `warning filter`_ "
"documentation for more advanced use-cases."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:57
msgid ""
"This code sample shows how to treat any ``UserWarning`` category class of"
" warning as an error:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:82
msgid ""
"The same option can be set in the ``pytest.ini`` or ``pyproject.toml`` "
"file using the ``filterwarnings`` ini option. For example, the "
"configuration below will ignore all user warnings and specific "
"deprecation warnings matching a regex, but will transform all other "
"warnings into errors."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:108
msgid ""
"When a warning matches more than one option in the list, the action for "
"the last matching option is performed."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:115
msgid "``@pytest.mark.filterwarnings``"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:119
msgid ""
"You can use the ``@pytest.mark.filterwarnings`` to add warning filters to"
" specific test items, allowing you to have finer control of which "
"warnings should be captured at test, class or even module level:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:138
msgid ""
"Filters applied using a mark take precedence over filters passed on the "
"command line or configured by the ``filterwarnings`` ini option."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:141
msgid ""
"You may apply a filter to all tests of a class by using the "
"``filterwarnings`` mark as a class decorator or to all tests in a module "
"by setting the :globalvar:`pytestmark` variable:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:151
msgid ""
"*Credits go to Florian Schulze for the reference implementation in the* "
"`pytest-warnings`_ *plugin.*"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:157
msgid "Disabling warnings summary"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:159
msgid ""
"Although not recommended, you can use the ``--disable-warnings`` command-"
"line option to suppress the warning summary entirely from the test run "
"output."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:163
msgid "Disabling warning capture entirely"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:165
msgid ""
"This plugin is enabled by default but can be disabled entirely in your "
"``pytest.ini`` file with:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:172
msgid ""
"Or passing ``-p no:warnings`` in the command-line. This might be useful "
"if your test suites handles warnings using an external system."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:179
msgid "DeprecationWarning and PendingDeprecationWarning"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:181
msgid ""
"By default pytest will display ``DeprecationWarning`` and "
"``PendingDeprecationWarning`` warnings from user code and third-party "
"libraries, as recommended by :pep:`565`. This helps users keep their code"
" modern and avoid breakages when deprecated warnings are effectively "
"removed."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:185
msgid ""
"However, in the specific case where users capture any type of warnings in"
" their test, either with :func:`pytest.warns`, "
":func:`pytest.deprecated_call` or using the :ref:`recwarn <recwarn>` "
"fixture, no warning will be displayed at all."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:189
msgid ""
"Sometimes it is useful to hide some specific deprecation warnings that "
"happen in code that you have no control over (such as third-party "
"libraries), in which case you might use the warning filters options (ini "
"or marks) to ignore those warnings."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:193
msgid "For example:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:202
msgid ""
"This will ignore all warnings of type ``DeprecationWarning`` where the "
"start of the message matches the regular expression ``\".*U.*mode is "
"deprecated\"``."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:205
msgid ""
"See :ref:`@pytest.mark.filterwarnings <filterwarnings>` and "
":ref:`Controlling warnings <controlling-warnings>` for more examples."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:210
msgid ""
"If warnings are configured at the interpreter level, using the "
":envvar:`python:PYTHONWARNINGS` environment variable or the ``-W`` "
"command-line option, pytest will not configure any filters by default."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:214
msgid ""
"Also pytest doesn't follow :pep:`506` suggestion of resetting all warning"
" filters because it might break test suites that configure warning "
"filters themselves by calling :func:`warnings.simplefilter` (see "
":issue:`2430` for an example of that)."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:224
msgid "Ensuring code triggers a deprecation warning"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:226
msgid ""
"You can also use :func:`pytest.deprecated_call` for checking that a "
"certain function call triggers a ``DeprecationWarning`` or "
"``PendingDeprecationWarning``:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:239
msgid ""
"This test will fail if ``myfunction`` does not issue a deprecation "
"warning when called with a ``17`` argument."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:254
msgid "Asserting warnings with the warns function"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:256
msgid ""
"You can check that code raises a particular warning using "
":func:`pytest.warns`, which works in a similar manner to :ref:`raises "
"<assertraises>` (except that :ref:`raises <assertraises>` does not "
"capture all exceptions, only the ``expected_exception``):"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:272
msgid ""
"The test will fail if the warning in question is not raised. Use the "
"keyword argument ``match`` to assert that the warning matches a text or "
"regex::"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:287
msgid "You can also call :func:`pytest.warns` on a function or code string:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:294
msgid ""
"The function also returns a list of all raised warnings (as "
"``warnings.WarningMessage`` objects), which you can query for additional "
"information:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:308
msgid ""
"Alternatively, you can examine raised warnings in detail using the "
":ref:`recwarn <recwarn>` fixture (see below)."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:312
msgid ""
"The :ref:`recwarn <recwarn>` fixture automatically ensures to reset the "
"warnings filter at the end of the test, so no global state is leaked."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:320
msgid "Recording warnings"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:322
msgid ""
"You can record raised warnings either using :func:`pytest.warns` or with "
"the ``recwarn`` fixture."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:325
msgid ""
"To record with :func:`pytest.warns` without asserting anything about the "
"warnings, pass no arguments as the expected warning type and it will "
"default to a generic Warning:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:338
msgid "The ``recwarn`` fixture will record warnings for the whole function:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:354
msgid ""
"Both ``recwarn`` and :func:`pytest.warns` return the same interface for "
"recorded warnings: a WarningsRecorder instance. To view the recorded "
"warnings, you can iterate over this instance, call ``len`` on it to get "
"the number of recorded warnings, or index into it to get a particular "
"recorded warning."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:361
msgid "Full API: :class:`~_pytest.recwarn.WarningsRecorder`."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:366
msgid "Additional use cases of warnings in tests"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:368
msgid ""
"Here are some use cases involving warnings that often come up in tests, "
"and suggestions on how to deal with them:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:370
msgid "To ensure that **at least one** of the indicated warnings is issued, use:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:378
msgid "To ensure that **only** certain warnings are issued, use:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:388
msgid "To ensure that **no** warnings are emitted, use:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:397
msgid "To suppress warnings, use:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:409
msgid "Custom failure messages"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:411
msgid ""
"Recording warnings provides an opportunity to produce custom test failure"
" messages for when no warnings are issued or other conditions are met."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:423
msgid ""
"If no warnings are issued when calling ``f``, then ``not record`` will "
"evaluate to ``True``.  You can then call :func:`pytest.fail` with a "
"custom error message."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:430
msgid "Internal pytest warnings"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:432
msgid ""
"pytest may generate its own warnings in some situations, such as improper"
" usage or deprecated features."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:434
msgid ""
"For example, pytest will emit a warning if it encounters a class that "
"matches :confval:`python_classes` but also defines an ``__init__`` "
"constructor, as this prevents the class from being instantiated:"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:459
msgid ""
"These warnings might be filtered using the same builtin mechanisms used "
"to filter other types of warnings."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:461
msgid ""
"Please read our :ref:`backwards-compatibility` to learn how we proceed "
"about deprecating and eventually removing features."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:464
msgid ""
"The full list of warnings is listed in :ref:`the reference documentation "
"<warnings ref>`."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:470
msgid "Resource Warnings"
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:472
msgid ""
"Additional information of the source of a :class:`ResourceWarning` can be"
" obtained when captured by pytest if :mod:`tracemalloc` module is "
"enabled."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:475
msgid ""
"One convenient way to enable :mod:`tracemalloc` when running tests is to "
"set the :envvar:`PYTHONTRACEMALLOC` to a large enough number of frames "
"(say ``20``, but that number is application dependent)."
msgstr ""

#: ../../../en/how-to/capture-warnings.rst:478
msgid ""
"For more information, consult the `Python Development Mode "
"<https://docs.python.org/3/library/devmode.html>`__ section in the Python"
" documentation."
msgstr ""

#: ../../../en/how-to/doctest.rst:4
msgid "How to run doctests"
msgstr ""

#: ../../../en/how-to/doctest.rst:6
msgid ""
"By default, all files matching the ``test*.txt`` pattern will be run "
"through the python standard :mod:`doctest` module.  You can change the "
"pattern by issuing:"
msgstr ""

#: ../../../en/how-to/doctest.rst:14
msgid ""
"on the command line. ``--doctest-glob`` can be given multiple times in "
"the command-line."
msgstr ""

#: ../../../en/how-to/doctest.rst:16
msgid "If you then have a text file like this:"
msgstr ""

#: ../../../en/how-to/doctest.rst:27
msgid "then you can just invoke ``pytest`` directly:"
msgstr ""

#: ../../../en/how-to/doctest.rst:41
msgid ""
"By default, pytest will collect ``test*.txt`` files looking for doctest "
"directives, but you can pass additional globs using the ``--doctest-"
"glob`` option (multi-allowed)."
msgstr ""

#: ../../../en/how-to/doctest.rst:44
msgid ""
"In addition to text files, you can also execute doctests directly from "
"docstrings of your classes and functions, including from test modules:"
msgstr ""

#: ../../../en/how-to/doctest.rst:70
msgid ""
"You can make these changes permanent in your project by putting them into"
" a pytest.ini file like this:"
msgstr ""

#: ../../../en/how-to/doctest.rst:81
msgid "Encoding"
msgstr ""

#: ../../../en/how-to/doctest.rst:83
msgid ""
"The default encoding is **UTF-8**, but you can specify the encoding that "
"will be used for those doctest files using the ``doctest_encoding`` ini "
"option:"
msgstr ""

#: ../../../en/how-to/doctest.rst:96
msgid "Using 'doctest' options"
msgstr ""

#: ../../../en/how-to/doctest.rst:98
msgid ""
"Python's standard :mod:`doctest` module provides some :ref:`options "
"<python:option-flags-and-directives>` to configure the strictness of "
"doctest tests. In pytest, you can enable those flags using the "
"configuration file."
msgstr ""

#: ../../../en/how-to/doctest.rst:102
msgid ""
"For example, to make pytest ignore trailing whitespaces and ignore "
"lengthy exception stack traces you can just write:"
msgstr ""

#: ../../../en/how-to/doctest.rst:110
msgid ""
"Alternatively, options can be enabled by an inline comment in the doc "
"test itself:"
msgstr ""

#: ../../../en/how-to/doctest.rst:119
msgid "pytest also introduces new options:"
msgstr ""

#: ../../../en/how-to/doctest.rst:121
msgid ""
"``ALLOW_UNICODE``: when enabled, the ``u`` prefix is stripped from "
"unicode strings in expected doctest output. This allows doctests to run "
"in Python 2 and Python 3 unchanged."
msgstr ""

#: ../../../en/how-to/doctest.rst:125
msgid ""
"``ALLOW_BYTES``: similarly, the ``b`` prefix is stripped from byte "
"strings in expected doctest output."
msgstr ""

#: ../../../en/how-to/doctest.rst:128
msgid ""
"``NUMBER``: when enabled, floating-point numbers only need to match as "
"far as the precision you have written in the expected doctest output. The"
" numbers are compared using :func:`pytest.approx` with relative tolerance"
" equal to the precision. For example, the following output would only "
"need to match to 2 decimal places when comparing ``3.14`` to "
"``pytest.approx(math.pi, rel=10**-2)``::"
msgstr ""

#: ../../../en/how-to/doctest.rst:138
msgid ""
"If you wrote ``3.1416`` then the actual output would need to match to "
"approximately 4 decimal places; and so on."
msgstr ""

#: ../../../en/how-to/doctest.rst:141
msgid ""
"This avoids false positives caused by limited floating-point precision, "
"like this::"
msgstr ""

#: ../../../en/how-to/doctest.rst:149
msgid ""
"``NUMBER`` also supports lists of floating-point numbers -- in fact, it "
"matches floating-point numbers appearing anywhere in the output, even "
"inside a string! This means that it may not be appropriate to enable "
"globally in ``doctest_optionflags`` in your configuration file."
msgstr ""

#: ../../../en/how-to/doctest.rst:158
msgid "Continue on failure"
msgstr ""

#: ../../../en/how-to/doctest.rst:160
msgid ""
"By default, pytest would report only the first failure for a given "
"doctest. If you want to continue the test even when you have failures, "
"do:"
msgstr ""

#: ../../../en/how-to/doctest.rst:169
msgid "Output format"
msgstr ""

#: ../../../en/how-to/doctest.rst:171
msgid ""
"You can change the diff output format on failure for your doctests by "
"using one of standard doctest modules format in options (see "
":data:`python:doctest.REPORT_UDIFF`, :data:`python:doctest.REPORT_CDIFF`,"
" :data:`python:doctest.REPORT_NDIFF`, "
":data:`python:doctest.REPORT_ONLY_FIRST_FAILURE`):"
msgstr ""

#: ../../../en/how-to/doctest.rst:186
msgid "pytest-specific features"
msgstr ""

#: ../../../en/how-to/doctest.rst:188
msgid ""
"Some features are provided to make writing doctests easier or with better"
" integration with your existing test suite. Keep in mind however that by "
"using those features you will make your doctests incompatible with the "
"standard ``doctests`` module."
msgstr ""

#: ../../../en/how-to/doctest.rst:193
msgid "Using fixtures"
msgstr ""

#: ../../../en/how-to/doctest.rst:195
msgid "It is possible to use fixtures using the ``getfixture`` helper:"
msgstr ""

#: ../../../en/how-to/doctest.rst:204
msgid ""
"Note that the fixture needs to be defined in a place visible by pytest, "
"for example, a `conftest.py` file or plugin; normal python files "
"containing docstrings are not normally scanned for fixtures unless "
"explicitly configured by :confval:`python_files`."
msgstr ""

#: ../../../en/how-to/doctest.rst:208
msgid ""
"Also, the :ref:`usefixtures <usefixtures>` mark and fixtures marked as "
":ref:`autouse <autouse>` are supported when executing text doctest files."
msgstr ""

#: ../../../en/how-to/doctest.rst:215
msgid "'doctest_namespace' fixture"
msgstr ""

#: ../../../en/how-to/doctest.rst:217
msgid ""
"The ``doctest_namespace`` fixture can be used to inject items into the "
"namespace in which your doctests run. It is intended to be used within "
"your own fixtures to provide the tests that use them with context."
msgstr ""

#: ../../../en/how-to/doctest.rst:221
msgid ""
"``doctest_namespace`` is a standard ``dict`` object into which you place "
"the objects you want to appear in the doctest namespace:"
msgstr ""

#: ../../../en/how-to/doctest.rst:234
msgid "which can then be used in your doctests directly:"
msgstr ""

#: ../../../en/how-to/doctest.rst:246
msgid ""
"Note that like the normal ``conftest.py``, the fixtures are discovered in"
" the directory tree conftest is in. Meaning that if you put your doctest "
"with your source code, the relevant conftest.py needs to be in the same "
"directory tree. Fixtures will not be discovered in a sibling directory "
"tree!"
msgstr ""

#: ../../../en/how-to/doctest.rst:251
msgid "Skipping tests"
msgstr ""

#: ../../../en/how-to/doctest.rst:253
msgid ""
"For the same reasons one might want to skip normal tests, it is also "
"possible to skip tests inside doctests."
msgstr ""

#: ../../../en/how-to/doctest.rst:256
msgid ""
"To skip a single check inside a doctest you can use the standard "
":data:`doctest.SKIP` directive:"
msgstr ""

#: ../../../en/how-to/doctest.rst:270
msgid "This will skip the first check, but not the second."
msgstr ""

#: ../../../en/how-to/doctest.rst:272
msgid ""
"pytest also allows using the standard pytest functions "
":func:`pytest.skip` and :func:`pytest.xfail` inside doctests, which might"
" be useful because you can then skip/xfail tests based on external "
"conditions:"
msgstr ""

#: ../../../en/how-to/doctest.rst:286
msgid ""
"However using those functions is discouraged because it reduces the "
"readability of the docstring."
msgstr ""

#: ../../../en/how-to/doctest.rst:291
msgid ""
":func:`pytest.skip` and :func:`pytest.xfail` behave differently depending"
" if the doctests are in a Python file (in docstrings) or a text file "
"containing doctests intermingled with text:"
msgstr ""

#: ../../../en/how-to/doctest.rst:295
msgid ""
"Python modules (docstrings): the functions only act in that specific "
"docstring, letting the other docstrings in the same module execute as "
"normal."
msgstr ""

#: ../../../en/how-to/doctest.rst:298
msgid ""
"Text files: the functions will skip/xfail the checks for the rest of the "
"entire file."
msgstr ""

#: ../../../en/how-to/doctest.rst:303
msgid "Alternatives"
msgstr ""

#: ../../../en/how-to/doctest.rst:305
msgid ""
"While the built-in pytest support provides a good set of functionalities "
"for using doctests, if you use them extensively you might be interested "
"in those external packages which add many more features, and include "
"pytest integration:"
msgstr ""

#: ../../../en/how-to/doctest.rst:309
msgid ""
"`pytest-doctestplus <https://github.com/astropy/pytest-doctestplus>`__: "
"provides advanced doctest support and enables the testing of "
"reStructuredText (\".rst\") files."
msgstr ""

#: ../../../en/how-to/doctest.rst:312
msgid ""
"`Sybil <https://sybil.readthedocs.io>`__: provides a way to test examples"
" in your documentation by parsing them from the documentation source and "
"evaluating the parsed examples as part of your normal test run."
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:4
msgid "How to use pytest with an existing test suite"
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:6
msgid ""
"Pytest can be used with most existing test suites, but its behavior "
"differs from other test runners such as :ref:`nose <noseintegration>` or "
"Python's default unittest framework."
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:10
msgid ""
"Before using this section you will want to :ref:`install pytest "
"<getstarted>`."
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:13
msgid "Running an existing test suite with pytest"
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:15
msgid ""
"Say you want to contribute to an existing repository somewhere. After "
"pulling the code into your development space using some flavor of version"
" control and (optionally) setting up a virtualenv you will want to run:"
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:26
msgid ""
"in your project root.  This will set up a symlink to your code in site-"
"packages, allowing you to edit your code while your tests run against it "
"as if it were installed."
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:30
msgid ""
"Setting up your project in development mode lets you avoid having to "
"reinstall every time you want to run your tests, and is less brittle than"
" mucking about with sys.path to point your tests at local code."
msgstr ""

#: ../../../en/how-to/existingtestsuite.rst:34
msgid "Also consider using :ref:`tox <use tox>`."
msgstr ""

#: ../../../en/how-to/failures.rst:4
msgid "How to handle test failures"
msgstr ""

#: ../../../en/how-to/failures.rst:9
msgid "Stopping after the first (or N) failures"
msgstr ""

#: ../../../en/how-to/failures.rst:11
msgid "To stop the testing process after the first (N) failures:"
msgstr ""

#: ../../../en/how-to/failures.rst:22
msgid "Using :doc:`python:library/pdb` with pytest"
msgstr ""

#: ../../../en/how-to/failures.rst:25
msgid "Dropping to :doc:`pdb <python:library/pdb>` on failures"
msgstr ""

#: ../../../en/how-to/failures.rst:27
msgid ""
"Python comes with a builtin Python debugger called :doc:`pdb "
"<python:library/pdb>`.  ``pytest`` allows one to drop into the :doc:`pdb "
"<python:library/pdb>` prompt via a command line option:"
msgstr ""

#: ../../../en/how-to/failures.rst:34
msgid ""
"This will invoke the Python debugger on every failure (or "
"KeyboardInterrupt). Often you might only want to do this for the first "
"failing test to understand a certain failure situation:"
msgstr ""

#: ../../../en/how-to/failures.rst:43
msgid ""
"Note that on any failure the exception information is stored on "
"``sys.last_value``, ``sys.last_type`` and ``sys.last_traceback``. In "
"interactive use, this allows one to drop into postmortem debugging with "
"any debug tool. One can also manually access the exception information, "
"for example::"
msgstr ""

#: ../../../en/how-to/failures.rst:59
msgid "Dropping to :doc:`pdb <python:library/pdb>` at the start of a test"
msgstr ""

#: ../../../en/how-to/failures.rst:61
msgid ""
"``pytest`` allows one to drop into the :doc:`pdb <python:library/pdb>` "
"prompt immediately at the start of each test via a command line option:"
msgstr ""

#: ../../../en/how-to/failures.rst:67
msgid "This will invoke the Python debugger at the start of every test."
msgstr ""

#: ../../../en/how-to/failures.rst:72
msgid "Setting breakpoints"
msgstr ""

#: ../../../en/how-to/failures.rst:76
msgid ""
"To set a breakpoint in your code use the native Python ``import "
"pdb;pdb.set_trace()`` call in your code and pytest automatically disables"
" its output capture for that test:"
msgstr ""

#: ../../../en/how-to/failures.rst:79
msgid "Output capture in other tests is not affected."
msgstr ""

#: ../../../en/how-to/failures.rst:80
msgid ""
"Any prior test output that has already been captured and will be "
"processed as such."
msgstr ""

#: ../../../en/how-to/failures.rst:82
msgid ""
"Output capture gets resumed when ending the debugger session (via the "
"``continue`` command)."
msgstr ""

#: ../../../en/how-to/failures.rst:89
msgid "Using the builtin breakpoint function"
msgstr ""

#: ../../../en/how-to/failures.rst:91
msgid ""
"Python 3.7 introduces a builtin ``breakpoint()`` function. Pytest "
"supports the use of ``breakpoint()`` with the following behaviours:"
msgstr ""

#: ../../../en/how-to/failures.rst:94
msgid ""
"When ``breakpoint()`` is called and ``PYTHONBREAKPOINT`` is set to the "
"default value, pytest will use the custom internal PDB trace UI instead "
"of the system default ``Pdb``."
msgstr ""

#: ../../../en/how-to/failures.rst:95
msgid ""
"When tests are complete, the system will default back to the system "
"``Pdb`` trace UI."
msgstr ""

#: ../../../en/how-to/failures.rst:96
msgid ""
"With ``--pdb`` passed to pytest, the custom internal Pdb trace UI is used"
" with both ``breakpoint()`` and failed tests/unhandled exceptions."
msgstr ""

#: ../../../en/how-to/failures.rst:97
msgid "``--pdbcls`` can be used to specify a custom debugger class."
msgstr ""

#: ../../../en/how-to/failures.rst:103
msgid "Fault Handler"
msgstr ""

#: ../../../en/how-to/failures.rst:107
msgid ""
"The :mod:`faulthandler` standard module can be used to dump Python "
"tracebacks on a segfault or after a timeout."
msgstr ""

#: ../../../en/how-to/failures.rst:110
msgid ""
"The module is automatically enabled for pytest runs, unless the ``-p "
"no:faulthandler`` is given on the command-line."
msgstr ""

#: ../../../en/how-to/failures.rst:113
msgid ""
"Also the :confval:`faulthandler_timeout=X<faulthandler_timeout>` "
"configuration option can be used to dump the traceback of all threads if "
"a test takes longer than ``X`` seconds to finish (not available on "
"Windows)."
msgstr ""

#: ../../../en/how-to/failures.rst:119
msgid ""
"This functionality has been integrated from the external `pytest-"
"faulthandler <https://github.com/pytest-dev/pytest-faulthandler>`__ "
"plugin, with two small differences:"
msgstr ""

#: ../../../en/how-to/failures.rst:123
msgid ""
"To disable it, use ``-p no:faulthandler`` instead of ``--no-"
"faulthandler``: the former can be used with any plugin, so it saves one "
"option."
msgstr ""

#: ../../../en/how-to/failures.rst:126
msgid ""
"The ``--faulthandler-timeout`` command-line option has become the "
":confval:`faulthandler_timeout` configuration option. It can still be "
"configured from the command-line using ``-o faulthandler_timeout=X``."
msgstr ""

#: ../../../en/how-to/failures.rst:134
msgid "Warning about unraisable exceptions and unhandled thread exceptions"
msgstr ""

#: ../../../en/how-to/failures.rst:140
msgid "These features only work on Python>=3.8."
msgstr ""

#: ../../../en/how-to/failures.rst:142
msgid ""
"Unhandled exceptions are exceptions that are raised in a situation in "
"which they cannot propagate to a caller. The most common case is an "
"exception raised in a :meth:`__del__ <object.__del__>` implementation."
msgstr ""

#: ../../../en/how-to/failures.rst:146
msgid ""
"Unhandled thread exceptions are exceptions raised in a "
":class:`~threading.Thread` but not handled, causing the thread to "
"terminate uncleanly."
msgstr ""

#: ../../../en/how-to/failures.rst:149
msgid ""
"Both types of exceptions are normally considered bugs, but may go "
"unnoticed because they don't cause the program itself to crash. Pytest "
"detects these conditions and issues a warning that is visible in the test"
" run summary."
msgstr ""

#: ../../../en/how-to/failures.rst:153
msgid ""
"The plugins are automatically enabled for pytest runs, unless the ``-p "
"no:unraisableexception`` (for unraisable exceptions) and ``-p "
"no:threadexception`` (for thread exceptions) options are given on the "
"command-line."
msgstr ""

#: ../../../en/how-to/failures.rst:158
msgid ""
"The warnings may be silenced selectively using the "
":ref:`pytest.mark.filterwarnings ref` mark. The warning categories are "
":class:`pytest.PytestUnraisableExceptionWarning` and "
":class:`pytest.PytestUnhandledThreadExceptionWarning`."
msgstr ""

#: ../../../en/how-to/fixtures.rst:4
msgid "How to use fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:6
msgid ":ref:`about-fixtures`"
msgstr ""

#: ../../../en/how-to/fixtures.rst:7
msgid ":ref:`Fixtures reference <reference-fixtures>`"
msgstr ""

#: ../../../en/how-to/fixtures.rst:11
msgid "\"Requesting\" fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:13
msgid ""
"At a basic level, test functions request fixtures they require by "
"declaring them as arguments."
msgstr ""

#: ../../../en/how-to/fixtures.rst:16
msgid ""
"When pytest goes to run a test, it looks at the parameters in that test "
"function's signature, and then searches for fixtures that have the same "
"names as those parameters. Once pytest finds them, it runs those "
"fixtures, captures what they returned (if anything), and passes those "
"objects into the test function as arguments."
msgstr ""

#: ../../../en/how-to/fixtures.rst:24
msgid "Quick example"
msgstr ""

#: ../../../en/how-to/fixtures.rst:63
msgid ""
"In this example, ``test_fruit_salad`` \"**requests**\" ``fruit_bowl`` "
"(i.e. ``def test_fruit_salad(fruit_bowl):``), and when pytest sees this, "
"it will execute the ``fruit_bowl`` fixture function and pass the object "
"it returns into ``test_fruit_salad`` as the ``fruit_bowl`` argument."
msgstr ""

#: ../../../en/how-to/fixtures.rst:68
msgid "Here's roughly what's happening if we were to do it by hand:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:91
msgid "Fixtures can **request** other fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:93
msgid ""
"One of pytest's greatest strengths is its extremely flexible fixture "
"system. It allows us to boil down complex requirements for tests into "
"more simple and organized functions, where we only need to have each one "
"describe the things they are dependent on. We'll get more into this "
"further down, but for now, here's a quick example to demonstrate how "
"fixtures can use other fixtures:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:125
msgid ""
"Notice that this is the same example from above, but very little changed."
" The fixtures in pytest **request** fixtures just like tests. All the "
"same **requesting** rules apply to fixtures that do for tests. Here's how"
" this example would work if we did it by hand:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:153
msgid "Fixtures are reusable"
msgstr ""

#: ../../../en/how-to/fixtures.rst:155
msgid ""
"One of the things that makes pytest's fixture system so powerful, is that"
" it gives us the ability to define a generic setup step that can be "
"reused over and over, just like a normal function would be used. Two "
"different tests can request the same fixture and have pytest give each "
"test their own result from that fixture."
msgstr ""

#: ../../../en/how-to/fixtures.rst:161
msgid ""
"This is extremely useful for making sure tests aren't affected by each "
"other. We can use this system to make sure each test gets its own fresh "
"batch of data and is starting from a clean state so it can provide "
"consistent, repeatable results."
msgstr ""

#: ../../../en/how-to/fixtures.rst:165
msgid "Here's an example of how this can come in handy:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:201
msgid ""
"Each test here is being given its own copy of that ``list`` object, which"
" means the ``order`` fixture is getting executed twice (the same is true "
"for the ``first_entry`` fixture). If we were to do this by hand as well, "
"it would look something like this:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:241
msgid "A test/fixture can **request** more than one fixture at a time"
msgstr ""

#: ../../../en/how-to/fixtures.rst:243
msgid ""
"Tests and fixtures aren't limited to **requesting** a single fixture at a"
" time. They can request as many as they like. Here's another quick "
"example to demonstrate:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:285
msgid ""
"Fixtures can be **requested** more than once per test (return values are "
"cached)"
msgstr ""

#: ../../../en/how-to/fixtures.rst:287
msgid ""
"Fixtures can also be **requested** more than once during the same test, "
"and pytest won't execute them again for that test. This means we can "
"**request** fixtures in multiple fixtures that are dependent on them (and"
" even again in the test itself) without those fixtures being executed "
"more than once."
msgstr ""

#: ../../../en/how-to/fixtures.rst:320
msgid ""
"If a **requested** fixture was executed once for every time it was "
"**requested** during a test, then this test would fail because both "
"``append_first`` and ``test_string_only`` would see ``order`` as an empty"
" list (i.e. ``[]``), but since the return value of ``order`` was cached "
"(along with any side effects executing it may have had) after the first "
"time it was called, both the test and ``append_first`` were referencing "
"the same object, and the test saw the effect ``append_first`` had on that"
" object."
msgstr ""

#: ../../../en/how-to/fixtures.rst:332
msgid "Autouse fixtures (fixtures you don't have to request)"
msgstr ""

#: ../../../en/how-to/fixtures.rst:334
msgid ""
"Sometimes you may want to have a fixture (or even several) that you know "
"all your tests will depend on. \"Autouse\" fixtures are a convenient way "
"to make all tests automatically **request** them. This can cut out a lot "
"of redundant **requests**, and can even provide more advanced fixture "
"usage (more on that further down)."
msgstr ""

#: ../../../en/how-to/fixtures.rst:340
msgid ""
"We can make a fixture an autouse fixture by passing in ``autouse=True`` "
"to the fixture's decorator. Here's a simple example for how they can be "
"used:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:372
msgid ""
"In this example, the ``append_first`` fixture is an autouse fixture. "
"Because it happens automatically, both tests are affected by it, even "
"though neither test **requested** it. That doesn't mean they *can't* be "
"**requested** though; just that it isn't *necessary*."
msgstr ""

#: ../../../en/how-to/fixtures.rst:380
msgid "Scope: sharing fixtures across classes, modules, packages or session"
msgstr ""

#: ../../../en/how-to/fixtures.rst:384
msgid ""
"Fixtures requiring network access depend on connectivity and are usually "
"time-expensive to create.  Extending the previous example, we can add a "
"``scope=\"module\"`` parameter to the :py:func:`@pytest.fixture "
"<pytest.fixture>` invocation to cause a ``smtp_connection`` fixture "
"function, responsible to create a connection to a preexisting SMTP "
"server, to only be invoked once per test *module* (the default is to "
"invoke once per test *function*). Multiple test functions in a test "
"module will thus each receive the same ``smtp_connection`` fixture "
"instance, thus saving time. Possible values for ``scope`` are: "
"``function``, ``class``, ``module``, ``package`` or ``session``."
msgstr ""

#: ../../../en/how-to/fixtures.rst:394
msgid ""
"The next example puts the fixture function into a separate "
"``conftest.py`` file so that tests from multiple test modules in the "
"directory can access the fixture function:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:428
msgid ""
"Here, the ``test_ehlo`` needs the ``smtp_connection`` fixture value.  "
"pytest will discover and call the :py:func:`@pytest.fixture "
"<pytest.fixture>` marked ``smtp_connection`` fixture function.  Running "
"the test looks like this:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:471
msgid ""
"You see the two ``assert 0`` failing and more importantly you can also "
"see that the **exactly same** ``smtp_connection`` object was passed into "
"the two test functions because pytest shows the incoming argument values "
"in the traceback.  As a result, the two test functions using "
"``smtp_connection`` run as quick as a single one because they reuse the "
"same instance."
msgstr ""

#: ../../../en/how-to/fixtures.rst:477
msgid ""
"If you decide that you rather want to have a session-scoped "
"``smtp_connection`` instance, you can simply declare it:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:490
msgid "Fixture scopes"
msgstr ""

#: ../../../en/how-to/fixtures.rst:492
msgid ""
"Fixtures are created when first requested by a test, and are destroyed "
"based on their ``scope``:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:494
msgid ""
"``function``: the default scope, the fixture is destroyed at the end of "
"the test."
msgstr ""

#: ../../../en/how-to/fixtures.rst:495
msgid ""
"``class``: the fixture is destroyed during teardown of the last test in "
"the class."
msgstr ""

#: ../../../en/how-to/fixtures.rst:496
msgid ""
"``module``: the fixture is destroyed during teardown of the last test in "
"the module."
msgstr ""

#: ../../../en/how-to/fixtures.rst:497
msgid ""
"``package``: the fixture is destroyed during teardown of the last test in"
" the package."
msgstr ""

#: ../../../en/how-to/fixtures.rst:498
msgid "``session``: the fixture is destroyed at the end of the test session."
msgstr ""

#: ../../../en/how-to/fixtures.rst:502
msgid ""
"Pytest only caches one instance of a fixture at a time, which means that "
"when using a parametrized fixture, pytest may invoke a fixture more than "
"once in the given scope."
msgstr ""

#: ../../../en/how-to/fixtures.rst:509
msgid "Dynamic scope"
msgstr ""

#: ../../../en/how-to/fixtures.rst:513
msgid ""
"In some cases, you might want to change the scope of the fixture without "
"changing the code. To do that, pass a callable to ``scope``. The callable"
" must return a string with a valid scope and will be executed only once -"
" during the fixture definition. It will be called with two keyword "
"arguments - ``fixture_name`` as a string and ``config`` with a "
"configuration object."
msgstr ""

#: ../../../en/how-to/fixtures.rst:518
msgid ""
"This can be especially useful when dealing with fixtures that need time "
"for setup, like spawning a docker container. You can use the command-line"
" argument to control the scope of the spawned containers for different "
"environments. See the example below."
msgstr ""

#: ../../../en/how-to/fixtures.rst:539
msgid "Teardown/Cleanup (AKA Fixture finalization)"
msgstr ""

#: ../../../en/how-to/fixtures.rst:541
msgid ""
"When we run our tests, we'll want to make sure they clean up after "
"themselves so they don't mess with any other tests (and also so that we "
"don't leave behind a mountain of test data to bloat the system). Fixtures"
" in pytest offer a very useful teardown system, which allows us to define"
" the specific steps necessary for each fixture to clean up after itself."
msgstr ""

#: ../../../en/how-to/fixtures.rst:547
msgid "This system can be leveraged in two ways."
msgstr ""

#: ../../../en/how-to/fixtures.rst:552
msgid "1. ``yield`` fixtures (recommended)"
msgstr ""

#: ../../../en/how-to/fixtures.rst:556
msgid ""
"\"Yield\" fixtures ``yield`` instead of ``return``. With these fixtures, "
"we can run some code and pass an object back to the requesting "
"fixture/test, just like with the other fixtures. The only differences "
"are:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:560
msgid "``return`` is swapped out for ``yield``."
msgstr ""

#: ../../../en/how-to/fixtures.rst:561
msgid "Any teardown code for that fixture is placed *after* the ``yield``."
msgstr ""

#: ../../../en/how-to/fixtures.rst:563
msgid ""
"Once pytest figures out a linear order for the fixtures, it will run each"
" one up until it returns or yields, and then move on to the next fixture "
"in the list to do the same thing."
msgstr ""

#: ../../../en/how-to/fixtures.rst:567
msgid ""
"Once the test is finished, pytest will go back down the list of fixtures,"
" but in the *reverse order*, taking each one that yielded, and running "
"the code inside it that was *after* the ``yield`` statement."
msgstr ""

#: ../../../en/how-to/fixtures.rst:571
msgid "As a simple example, consider this basic email module:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:601
msgid ""
"Let's say we want to test sending email from one user to another. We'll "
"have to first make each user, then send the email from one user to the "
"other, and finally assert that the other user received that message in "
"their inbox. If we want to clean up after the test runs, we'll likely "
"have to make sure the other user's mailbox is emptied before deleting "
"that user, otherwise the system may complain."
msgstr ""

#: ../../../en/how-to/fixtures.rst:608 ../../../en/how-to/fixtures.rst:907
msgid "Here's what that might look like:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:643
msgid ""
"Because ``receiving_user`` is the last fixture to run during setup, it's "
"the first to run during teardown."
msgstr ""

#: ../../../en/how-to/fixtures.rst:646
msgid ""
"There is a risk that even having the order right on the teardown side of "
"things doesn't guarantee a safe cleanup. That's covered in a bit more "
"detail in :ref:`safe teardowns`."
msgstr ""

#: ../../../en/how-to/fixtures.rst:657
msgid "Handling errors for yield fixture"
msgstr ""

#: ../../../en/how-to/fixtures.rst:659
msgid ""
"If a yield fixture raises an exception before yielding, pytest won't try "
"to run the teardown code after that yield fixture's ``yield`` statement. "
"But, for every fixture that has already run successfully for that test, "
"pytest will still attempt to tear them down as it normally would."
msgstr ""

#: ../../../en/how-to/fixtures.rst:665
msgid "2. Adding finalizers directly"
msgstr ""

#: ../../../en/how-to/fixtures.rst:667
msgid ""
"While yield fixtures are considered to be the cleaner and more "
"straightforward option, there is another choice, and that is to add "
"\"finalizer\" functions directly to the test's `request-context`_ object."
" It brings a similar result as yield fixtures, but requires a bit more "
"verbosity."
msgstr ""

#: ../../../en/how-to/fixtures.rst:672
msgid ""
"In order to use this approach, we have to request the `request-context`_ "
"object (just like we would request another fixture) in the fixture we "
"need to add teardown code for, and then pass a callable, containing that "
"teardown code, to its ``addfinalizer`` method."
msgstr ""

#: ../../../en/how-to/fixtures.rst:677
msgid ""
"We have to be careful though, because pytest will run that finalizer once"
" it's been added, even if that fixture raises an exception after adding "
"the finalizer. So to make sure we don't run the finalizer code when we "
"wouldn't need to, we would only add the finalizer once the fixture would "
"have done something that we'd need to teardown."
msgstr ""

#: ../../../en/how-to/fixtures.rst:683
msgid ""
"Here's how the previous example would look using the ``addfinalizer`` "
"method:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:732
msgid ""
"It's a bit longer than yield fixtures and a bit more complex, but it does"
" offer some nuances for when you're in a pinch."
msgstr ""

#: ../../../en/how-to/fixtures.rst:742
msgid "Note on finalizer order"
msgstr ""

#: ../../../en/how-to/fixtures.rst:744
msgid ""
"Finalizers are executed in a first-in-last-out order. For yield fixtures,"
" the first teardown code to run is from the right-most fixture, i.e. the "
"last test parameter."
msgstr ""

#: ../../../en/how-to/fixtures.rst:785
msgid ""
"For finalizers, the first fixture to run is last call to "
"`request.addfinalizer`."
msgstr ""

#: ../../../en/how-to/fixtures.rst:819
msgid ""
"This is so because yield fixtures use `addfinalizer` behind the scenes: "
"when the fixture executes, `addfinalizer` registers a function that "
"resumes the generator, which in turn calls the teardown code."
msgstr ""

#: ../../../en/how-to/fixtures.rst:825
msgid "Safe teardowns"
msgstr ""

#: ../../../en/how-to/fixtures.rst:827
msgid ""
"The fixture system of pytest is *very* powerful, but it's still being run"
" by a computer, so it isn't able to figure out how to safely teardown "
"everything we throw at it. If we aren't careful, an error in the wrong "
"spot might leave stuff from our tests behind, and that can cause further "
"issues pretty quickly."
msgstr ""

#: ../../../en/how-to/fixtures.rst:832
msgid ""
"For example, consider the following tests (based off of the mail example "
"from above):"
msgstr ""

#: ../../../en/how-to/fixtures.rst:860
msgid ""
"This version is a lot more compact, but it's also harder to read, doesn't"
" have a very descriptive fixture name, and none of the fixtures can be "
"reused easily."
msgstr ""

#: ../../../en/how-to/fixtures.rst:863
msgid ""
"There's also a more serious issue, which is that if any of those steps in"
" the setup raise an exception, none of the teardown code will run."
msgstr ""

#: ../../../en/how-to/fixtures.rst:866
msgid ""
"One option might be to go with the ``addfinalizer`` method instead of "
"yield fixtures, but that might get pretty complex and difficult to "
"maintain (and it wouldn't be compact anymore)."
msgstr ""

#: ../../../en/how-to/fixtures.rst:879
msgid "Safe fixture structure"
msgstr ""

#: ../../../en/how-to/fixtures.rst:881
msgid ""
"The safest and simplest fixture structure requires limiting fixtures to "
"only making one state-changing action each, and then bundling them "
"together with their teardown code, as :ref:`the email examples above "
"<yield fixtures>` showed."
msgstr ""

#: ../../../en/how-to/fixtures.rst:885
msgid ""
"The chance that a state-changing operation can fail but still modify "
"state is negligible, as most of these operations tend to be `transaction "
"<https://en.wikipedia.org/wiki/Transaction_processing>`_-based (at least "
"at the level of testing where state could be left behind). So if we make "
"sure that any successful state-changing action gets torn down by moving "
"it to a separate fixture function and separating it from other, "
"potentially failing state-changing actions, then our tests will stand the"
" best chance at leaving the test environment the way they found it."
msgstr ""

#: ../../../en/how-to/fixtures.rst:894
msgid ""
"For an example, let's say we have a website with a login page, and we "
"have access to an admin API where we can generate users. For our test, we"
" want to:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:897
msgid "Create a user through that admin API"
msgstr ""

#: ../../../en/how-to/fixtures.rst:898
msgid "Launch a browser using Selenium"
msgstr ""

#: ../../../en/how-to/fixtures.rst:899
msgid "Go to the login page of our site"
msgstr ""

#: ../../../en/how-to/fixtures.rst:900
msgid "Log in as the user we created"
msgstr ""

#: ../../../en/how-to/fixtures.rst:901
msgid "Assert that their name is in the header of the landing page"
msgstr ""

#: ../../../en/how-to/fixtures.rst:903
msgid ""
"We wouldn't want to leave that user in the system, nor would we want to "
"leave that browser session running, so we'll want to make sure the "
"fixtures that create those things clean up after themselves."
msgstr ""

#: ../../../en/how-to/fixtures.rst:911 ../../../en/how-to/fixtures.rst:1005
msgid ""
"For this example, certain fixtures (i.e. ``base_url`` and "
"``admin_credentials``) are implied to exist elsewhere. So for now, let's "
"assume they exist, and we're just not looking at them."
msgstr ""

#: ../../../en/how-to/fixtures.rst:963
msgid ""
"The way the dependencies are laid out means it's unclear if the ``user`` "
"fixture would execute before the ``driver`` fixture. But that's ok, "
"because those are atomic operations, and so it doesn't matter which one "
"runs first because the sequence of events for the test is still "
"`linearizable <https://en.wikipedia.org/wiki/Linearizability>`_. But what"
" *does* matter is that, no matter which one runs first, if the one raises"
" an exception while the other would not have, neither will have left "
"anything behind. If ``driver`` executes before ``user``, and ``user`` "
"raises an exception, the driver will still quit, and the user was never "
"made. And if ``driver`` was the one to raise the exception, then the "
"driver would never have been started and the user would never have been "
"made."
msgstr ""

#: ../../../en/how-to/fixtures.rst:985
msgid "Running multiple ``assert`` statements safely"
msgstr ""

#: ../../../en/how-to/fixtures.rst:987
msgid ""
"Sometimes you may want to run multiple asserts after doing all that "
"setup, which makes sense as, in more complex systems, a single action can"
" kick off multiple behaviors. pytest has a convenient way of handling "
"this and it combines a bunch of what we've gone over so far."
msgstr ""

#: ../../../en/how-to/fixtures.rst:992
msgid ""
"All that's needed is stepping up to a larger scope, then having the "
"**act** step defined as an autouse fixture, and finally, making sure all "
"the fixtures are targeting that higher level scope."
msgstr ""

#: ../../../en/how-to/fixtures.rst:996
msgid ""
"Let's pull :ref:`an example from above <safe fixture structure>`, and "
"tweak it a bit. Let's say that in addition to checking for a welcome "
"message in the header, we also want to check for a sign out button, and a"
" link to the user's profile."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1000
msgid ""
"Let's take a look at how we can structure that so we can run multiple "
"asserts without having to repeat all those steps again."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1065
msgid ""
"Notice that the methods are only referencing ``self`` in the signature as"
" a formality. No state is tied to the actual test class as it might be in"
" the ``unittest.TestCase`` framework. Everything is managed by the pytest"
" fixture system."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1070
msgid ""
"Each method only has to request the fixtures that it actually needs "
"without worrying about order. This is because the **act** fixture is an "
"autouse fixture, and it made sure all the other fixtures executed before "
"it. There's no more changes of state that need to take place, so the "
"tests are free to make as many non-state-changing queries as they want "
"without risking stepping on the toes of the other tests."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1077
msgid ""
"The ``login`` fixture is defined inside the class as well, because not "
"every one of the other tests in the module will be expecting a successful"
" login, and the **act** may need to be handled a little differently for "
"another test class. For example, if we wanted to write another test "
"scenario around submitting bad credentials, we could handle it by adding "
"something like this to the test file:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1106
msgid "Fixtures can introspect the requesting test context"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1108
msgid ""
"Fixture functions can accept the :py:class:`request "
"<_pytest.fixtures.FixtureRequest>` object to introspect the "
"\"requesting\" test function, class or module context. Further extending "
"the previous ``smtp_connection`` fixture example, let's read an optional "
"server URL from the test module which uses our fixture:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1129
msgid ""
"We use the ``request.module`` attribute to optionally obtain an "
"``smtpserver`` attribute from the test module.  If we just execute again,"
" nothing much has changed:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1143
msgid ""
"Let's quickly create another test module that actually sets the server "
"URL in its module namespace:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1156
msgid "Running it:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1173
msgid ""
"voila! The ``smtp_connection`` fixture function picked up our mail server"
" name from the module namespace."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1179
msgid "Using markers to pass data to fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1181
msgid ""
"Using the :py:class:`request <_pytest.fixtures.FixtureRequest>` object, a"
" fixture can also access markers which are applied to a test function. "
"This can be useful to pass data into a fixture from a test:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1210
msgid "Factories as fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1212
msgid ""
"The \"factory as fixture\" pattern can help in situations where the "
"result of a fixture is needed multiple times in a single test. Instead of"
" returning data directly, the fixture instead returns a function which "
"generates the data. This function can then be called multiple times in "
"the test."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1217
msgid "Factories can have parameters as needed:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1234
msgid ""
"If the data created by the factory requires managing, the fixture can "
"take care of that:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1263
msgid "Parametrizing fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1265
msgid ""
"Fixture functions can be parametrized in which case they will be called "
"multiple times, each time executing the set of dependent tests, i.e. the "
"tests that depend on this fixture.  Test functions usually do not need to"
" be aware of their re-running.  Fixture parametrization helps to write "
"exhaustive functional tests for components which themselves can be "
"configured in multiple ways."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1272
msgid ""
"Extending the previous example, we can flag the fixture to create two "
"``smtp_connection`` fixture instances which will cause all tests using "
"the fixture to run twice.  The fixture function gets access to each "
"parameter through the special :py:class:`request <FixtureRequest>` "
"object:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1292
msgid ""
"The main change is the declaration of ``params`` with "
":py:func:`@pytest.fixture <pytest.fixture>`, a list of values for each of"
" which the fixture function will execute and can access a value via "
"``request.param``.  No test function code needs to change. So let's just "
"do another run:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1359
msgid ""
"We see that our two test functions each ran twice, against the different "
"``smtp_connection`` instances.  Note also, that with the "
"``mail.python.org`` connection the second test fails in ``test_ehlo`` "
"because a different server string is expected than what arrived."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1364
msgid ""
"pytest will build a string that is the test ID for each fixture value in "
"a parametrized fixture, e.g. ``test_ehlo[smtp.gmail.com]`` and "
"``test_ehlo[mail.python.org]`` in the above examples.  These IDs can be "
"used with ``-k`` to select specific cases to run, and they will also "
"identify the specific case when one is failing.  Running pytest with "
"``--collect-only`` will show the generated IDs."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1371
msgid ""
"Numbers, strings, booleans and ``None`` will have their usual string "
"representation used in the test ID. For other objects, pytest will make a"
" string based on the argument name.  It is possible to customise the "
"string used in a test ID for a certain fixture value by using the ``ids``"
" keyword argument:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1407
msgid ""
"The above shows how ``ids`` can be either a list of strings to use or a "
"function which will be called with the fixture value and then has to "
"return a string to use.  In the latter case if the function returns "
"``None`` then pytest's auto-generated ID will be used."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1412
msgid "Running the above tests results in the following test IDs being used:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1445
msgid "Using marks with parametrized fixtures"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1447
msgid ""
":func:`pytest.param` can be used to apply marks in values sets of "
"parametrized fixtures in the same way that they can be used with "
":ref:`@pytest.mark.parametrize <@pytest.mark.parametrize>`."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1450 ../../../en/how-to/output.rst:284
#: ../../../en/how-to/writing_hook_functions.rst:224
msgid "Example:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1466
msgid ""
"Running this test will *skip* the invocation of ``data_set`` with value "
"``2``:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1486
msgid "Modularity: using fixtures from a fixture function"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1488
msgid ""
"In addition to using fixtures in test functions, fixture functions can "
"use other fixtures themselves.  This contributes to a modular design of "
"your fixtures and allows re-use of framework-specific fixtures across "
"many projects.  As a simple example, we can extend the previous example "
"and instantiate an object ``app`` where we stick the already defined "
"``smtp_connection`` resource into it:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1515
msgid ""
"Here we declare an ``app`` fixture which receives the previously defined "
"``smtp_connection`` fixture and instantiates an ``App`` object with it.  "
"Let's run it:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1532
msgid ""
"Due to the parametrization of ``smtp_connection``, the test will run "
"twice with two different ``App`` instances and respective smtp servers.  "
"There is no need for the ``app`` fixture to be aware of the "
"``smtp_connection`` parametrization because pytest will fully analyse the"
" fixture dependency graph."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1537
msgid ""
"Note that the ``app`` fixture has a scope of ``module`` and uses a "
"module-scoped ``smtp_connection`` fixture.  The example would still work "
"if ``smtp_connection`` was cached on a ``session`` scope: it is fine for "
"fixtures to use \"broader\" scoped fixtures but not the other way round: "
"A session-scoped fixture could not use a module-scoped one in a "
"meaningful way."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1548
msgid "Automatic grouping of tests by fixture instances"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1552
msgid ""
"pytest minimizes the number of active fixtures during test runs. If you "
"have a parametrized fixture, then all the tests using it will first "
"execute with one instance and then finalizers are called before the next "
"fixture instance is created.  Among other things, this eases testing of "
"applications which create and use global state."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1558
msgid ""
"The following example uses two parametrized fixtures, one of which is "
"scoped on a per-module basis, and all the functions perform ``print`` "
"calls to show the setup/teardown flow:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1596
msgid "Let's run the tests in verbose mode and with looking at the print-output:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1642
msgid ""
"You can see that the parametrized module-scoped ``modarg`` resource "
"caused an ordering of test execution that lead to the fewest possible "
"\"active\" resources. The finalizer for the ``mod1`` parametrized "
"resource was executed before the ``mod2`` resource was setup."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1647
msgid ""
"In particular notice that test_0 is completely independent and finishes "
"first. Then test_1 is executed with ``mod1``, then test_2 with ``mod1``, "
"then test_1 with ``mod2`` and finally test_2 with ``mod2``."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1651
msgid ""
"The ``otherarg`` parametrized resource (having function scope) was set up"
" before and teared down after every test that used it."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1658
msgid "Use fixtures in classes and modules with ``usefixtures``"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1662
msgid ""
"Sometimes test functions do not directly need access to a fixture object."
" For example, tests may require to operate with an empty directory as the"
" current working directory but otherwise do not care for the concrete "
"directory.  Here is how you can use the standard :mod:`tempfile` and "
"pytest fixtures to achieve it.  We separate the creation of the fixture "
"into a :file:`conftest.py` file:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1688
msgid "and declare its use in a test module via a ``usefixtures`` marker:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1708
msgid ""
"Due to the ``usefixtures`` marker, the ``cleandir`` fixture will be "
"required for the execution of each test method, just as if you specified "
"a \"cleandir\" function argument to each of them.  Let's run it to verify"
" our fixture is activated and the tests pass:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1719
msgid "You can specify multiple fixtures like this:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1727
msgid ""
"and you may specify fixture usage at the test module level using "
":globalvar:`pytestmark`:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1734
msgid ""
"It is also possible to put fixtures required by all tests in your project"
" into an ini-file:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1746
msgid ""
"Note this mark has no effect in **fixture functions**. For example, this "
"**will not work as expected**:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1756
msgid ""
"Currently this will not generate any error or warning, but this is "
"intended to be handled by :issue:`3664`."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1762
msgid "Overriding fixtures on various levels"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1764
msgid ""
"In relatively large test suite, you most likely need to ``override`` a "
"``global`` or ``root`` fixture with a ``locally`` defined one, keeping "
"the test code readable and maintainable."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1768
msgid "Override a fixture on a folder (conftest) level"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1770 ../../../en/how-to/fixtures.rst:1809
#: ../../../en/how-to/fixtures.rst:1850 ../../../en/how-to/fixtures.rst:1886
msgid "Given the tests file structure is:"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1802
msgid ""
"As you can see, a fixture with the same name can be overridden for "
"certain test folder level. Note that the ``base`` or ``super`` fixture "
"can be accessed from the ``overriding`` fixture easily - used in the "
"example above."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1807
msgid "Override a fixture on a test module level"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1844
msgid ""
"In the example above, a fixture with the same name can be overridden for "
"certain test module."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1848
msgid "Override a fixture with direct test parametrization"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1879
msgid ""
"In the example above, a fixture value is overridden by the test parameter"
" value. Note that the value of the fixture can be overridden this way "
"even if the test doesn't use it directly (doesn't mention it in the "
"function prototype)."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1884
msgid "Override a parametrized fixture with non-parametrized one and vice versa"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1929
msgid ""
"In the example above, a parametrized fixture is overridden with a non-"
"parametrized version, and a non-parametrized fixture is overridden with a"
" parametrized version for certain test module. The same applies for the "
"test folder level obviously."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1935
msgid "Using fixtures from other projects"
msgstr ""

#: ../../../en/how-to/fixtures.rst:1937
msgid ""
"Usually projects that provide pytest support will use :ref:`entry points "
"<setuptools entry points>`, so just installing those projects into an "
"environment will make those fixtures available for use."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1940
msgid ""
"In case you want to use fixtures from a project that does not use entry "
"points, you can define :globalvar:`pytest_plugins` in your top "
"``conftest.py`` file to register that module as a plugin."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1944
msgid ""
"Suppose you have some fixtures in ``mylibrary.fixtures`` and you want to "
"reuse them into your ``app/tests`` directory."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1947
msgid ""
"All you need to do is to define :globalvar:`pytest_plugins` in "
"``app/tests/conftest.py`` pointing to that module."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1954
msgid ""
"This effectively registers ``mylibrary.fixtures`` as a plugin, making all"
" its fixtures and hooks available to tests in ``app/tests``."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1959
msgid ""
"Sometimes users will *import* fixtures from other projects for use, "
"however this is not recommended: importing fixtures into a module will "
"register them in pytest as *defined* in that module."
msgstr ""

#: ../../../en/how-to/fixtures.rst:1963
msgid ""
"This has minor consequences, such as appearing multiple times in ``pytest"
" --help``, but it is not **recommended** because this behavior might "
"change/stop working in future versions."
msgstr ""

#: ../../../en/how-to/index.rst:6
msgid "How-to guides"
msgstr ""

#: ../../../en/how-to/index.rst:9
msgid "Core pytest functionality"
msgstr ""

#: ../../../en/how-to/index.rst:25
msgid "Test output and outcomes"
msgstr ""

#: ../../../en/how-to/index.rst:38
msgid "Plugins"
msgstr ""

#: ../../../en/how-to/index.rst:48
msgid "pytest and other test systems"
msgstr ""

#: ../../../en/how-to/index.rst:59
msgid "pytest development environment"
msgstr ""

#: ../../../en/how-to/logging.rst:4
msgid "How to manage logging"
msgstr ""

#: ../../../en/how-to/logging.rst:6
msgid ""
"pytest captures log messages of level ``WARNING`` or above automatically "
"and displays them in their own section for each failed test in the same "
"manner as captured stdout and stderr."
msgstr ""

#: ../../../en/how-to/logging.rst:9
msgid "Running without options:"
msgstr ""

#: ../../../en/how-to/logging.rst:15 ../../../en/how-to/logging.rst:38
msgid "Shows failed tests like so:"
msgstr ""

#: ../../../en/how-to/logging.rst:27
msgid ""
"By default each captured log message shows the module, line number, log "
"level and message."
msgstr ""

#: ../../../en/how-to/logging.rst:30
msgid ""
"If desired the log and date format can be specified to anything that the "
"logging module supports by passing specific formatting options:"
msgstr ""

#: ../../../en/how-to/logging.rst:50
msgid "These options can also be customized through ``pytest.ini`` file:"
msgstr ""

#: ../../../en/how-to/logging.rst:58
msgid ""
"Further it is possible to disable reporting of captured content (stdout, "
"stderr and logs) on failed tests completely with:"
msgstr ""

#: ../../../en/how-to/logging.rst:67
msgid "caplog fixture"
msgstr ""

#: ../../../en/how-to/logging.rst:69
msgid ""
"Inside tests it is possible to change the log level for the captured log "
"messages.  This is supported by the ``caplog`` fixture:"
msgstr ""

#: ../../../en/how-to/logging.rst:77
msgid ""
"By default the level is set on the root logger, however as a convenience "
"it is also possible to set the log level of any logger:"
msgstr ""

#: ../../../en/how-to/logging.rst:86
msgid "The log levels set are restored automatically at the end of the test."
msgstr ""

#: ../../../en/how-to/logging.rst:88
msgid ""
"It is also possible to use a context manager to temporarily change the "
"log level inside a ``with`` block:"
msgstr ""

#: ../../../en/how-to/logging.rst:97
msgid ""
"Again, by default the level of the root logger is affected but the level "
"of any logger can be changed instead with:"
msgstr ""

#: ../../../en/how-to/logging.rst:106
msgid ""
"Lastly all the logs sent to the logger during the test run are made "
"available on the fixture in the form of both the ``logging.LogRecord`` "
"instances and the final log text. This is useful for when you want to "
"assert on the contents of a message:"
msgstr ""

#: ../../../en/how-to/logging.rst:118
msgid ""
"For all the available attributes of the log records see the "
"``logging.LogRecord`` class."
msgstr ""

#: ../../../en/how-to/logging.rst:121
msgid ""
"You can also resort to ``record_tuples`` if all you want to do is to "
"ensure, that certain messages have been logged under a given logger name "
"with a given severity and message:"
msgstr ""

#: ../../../en/how-to/logging.rst:132
msgid ""
"You can call ``caplog.clear()`` to reset the captured log records in a "
"test:"
msgstr ""

#: ../../../en/how-to/logging.rst:143
msgid ""
"The ``caplog.records`` attribute contains records from the current stage "
"only, so inside the ``setup`` phase it contains only setup logs, same "
"with the ``call`` and ``teardown`` phases."
msgstr ""

#: ../../../en/how-to/logging.rst:147
msgid ""
"To access logs from other stages, use the ``caplog.get_records(when)`` "
"method. As an example, if you want to make sure that tests which use a "
"certain fixture never log any warnings, you can inspect the records for "
"the ``setup`` and ``call`` stages during teardown like so:"
msgstr ""

#: ../../../en/how-to/logging.rst:166
msgid "The full API is available at :class:`pytest.LogCaptureFixture`."
msgstr ""

#: ../../../en/how-to/logging.rst:172
msgid "Live Logs"
msgstr ""

#: ../../../en/how-to/logging.rst:174
msgid ""
"By setting the :confval:`log_cli` configuration option to ``true``, "
"pytest will output logging records as they are emitted directly into the "
"console."
msgstr ""

#: ../../../en/how-to/logging.rst:177
msgid ""
"You can specify the logging level for which log records with equal or "
"higher level are printed to the console by passing ``--log-cli-level``. "
"This setting accepts the logging level names or numeric values as seen in"
" :ref:`logging's documentation <python:levels>`."
msgstr ""

#: ../../../en/how-to/logging.rst:182
msgid ""
"Additionally, you can also specify ``--log-cli-format`` and ``--log-cli-"
"date-format`` which mirror and default to ``--log-format`` and ``--log-"
"date-format`` if not provided, but are applied only to the console "
"logging handler."
msgstr ""

#: ../../../en/how-to/logging.rst:187
msgid ""
"All of the CLI log options can also be set in the configuration INI file."
" The option names are:"
msgstr ""

#: ../../../en/how-to/logging.rst:190
msgid "``log_cli_level``"
msgstr ""

#: ../../../en/how-to/logging.rst:191
msgid "``log_cli_format``"
msgstr ""

#: ../../../en/how-to/logging.rst:192
msgid "``log_cli_date_format``"
msgstr ""

#: ../../../en/how-to/logging.rst:194
msgid ""
"If you need to record the whole test suite logging calls to a file, you "
"can pass ``--log-file=/path/to/log/file``. This log file is opened in "
"write mode which means that it will be overwritten at each run tests "
"session. Note that relative paths for the log-file location, whether "
"passed on the CLI or declared in a config file, are always resolved "
"relative to the current working directory."
msgstr ""

#: ../../../en/how-to/logging.rst:200
msgid ""
"You can also specify the logging level for the log file by passing "
"``--log-file-level``. This setting accepts the logging level names or "
"numeric values as seen in :ref:`logging's documentation <python:levels>`."
msgstr ""

#: ../../../en/how-to/logging.rst:204
msgid ""
"Additionally, you can also specify ``--log-file-format`` and ``--log-"
"file-date-format`` which are equal to ``--log-format`` and ``--log-date-"
"format`` but are applied to the log file logging handler."
msgstr ""

#: ../../../en/how-to/logging.rst:208
msgid ""
"All of the log file options can also be set in the configuration INI "
"file. The option names are:"
msgstr ""

#: ../../../en/how-to/logging.rst:211
msgid "``log_file``"
msgstr ""

#: ../../../en/how-to/logging.rst:212
msgid "``log_file_level``"
msgstr ""

#: ../../../en/how-to/logging.rst:213
msgid "``log_file_format``"
msgstr ""

#: ../../../en/how-to/logging.rst:214
msgid "``log_file_date_format``"
msgstr ""

#: ../../../en/how-to/logging.rst:216
msgid ""
"You can call ``set_log_path()`` to customize the log_file path "
"dynamically. This functionality is considered **experimental**."
msgstr ""

#: ../../../en/how-to/logging.rst:222
msgid "Customizing Colors"
msgstr ""

#: ../../../en/how-to/logging.rst:224
msgid ""
"Log levels are colored if colored terminal output is enabled. Changing "
"from default colors or putting color on custom log levels is supported "
"through ``add_color_level()``. Example:"
msgstr ""

#: ../../../en/how-to/logging.rst:241
msgid ""
"This feature and its API are considered **experimental** and might change"
" between releases without a deprecation notice."
msgstr ""

#: ../../../en/how-to/logging.rst:246
msgid "Release notes"
msgstr ""

#: ../../../en/how-to/logging.rst:248
msgid ""
"This feature was introduced as a drop-in replacement for the :pypi"
":`pytest-catchlog` plugin and they conflict with each other. The backward"
" compatibility API with ``pytest-capturelog`` has been dropped when this "
"feature was introduced, so if for that reason you still need ``pytest-"
"catchlog`` you can disable the internal feature by adding to your "
"``pytest.ini``:"
msgstr ""

#: ../../../en/how-to/logging.rst:264
msgid "Incompatible changes in pytest 3.4"
msgstr ""

#: ../../../en/how-to/logging.rst:266
msgid ""
"This feature was introduced in ``3.3`` and some **incompatible changes** "
"have been made in ``3.4`` after community feedback:"
msgstr ""

#: ../../../en/how-to/logging.rst:269
msgid ""
"Log levels are no longer changed unless explicitly requested by the "
":confval:`log_level` configuration or ``--log-level`` command-line "
"options. This allows users to configure logger objects themselves. "
"Setting :confval:`log_level` will set the level that is captured globally"
" so if a specific test requires a lower level than this, use the "
"``caplog.set_level()`` functionality otherwise that test will be prone to"
" failure."
msgstr ""

#: ../../../en/how-to/logging.rst:274
msgid ""
":ref:`Live Logs <live_logs>` is now disabled by default and can be "
"enabled setting the :confval:`log_cli` configuration option to ``true``. "
"When enabled, the verbosity is increased so logging for each test is "
"visible."
msgstr ""

#: ../../../en/how-to/logging.rst:277
msgid ""
":ref:`Live Logs <live_logs>` are now sent to ``sys.stdout`` and no longer"
" require the ``-s`` command-line option to work."
msgstr ""

#: ../../../en/how-to/logging.rst:280
msgid ""
"If you want to partially restore the logging behavior of version ``3.3``,"
" you can add this options to your ``ini`` file:"
msgstr ""

#: ../../../en/how-to/logging.rst:289
msgid ""
"More details about the discussion that lead to this changes can be read "
"in :issue:`3013`."
msgstr ""

#: ../../../en/how-to/mark.rst:4
msgid "How to mark test functions with attributes"
msgstr ""

#: ../../../en/how-to/mark.rst:6
msgid ""
"By using the ``pytest.mark`` helper you can easily set metadata on your "
"test functions. You can find the full list of builtin markers in the "
":ref:`API Reference<marks ref>`. Or you can list all the markers, "
"including builtin and custom, using the CLI - :code:`pytest --markers`."
msgstr ""

#: ../../../en/how-to/mark.rst:11
msgid "Here are some of the builtin markers:"
msgstr ""

#: ../../../en/how-to/mark.rst:13
msgid ""
":ref:`usefixtures <usefixtures>` - use fixtures on a test function or "
"class"
msgstr ""

#: ../../../en/how-to/mark.rst:14
msgid ""
":ref:`filterwarnings <filterwarnings>` - filter certain warnings of a "
"test function"
msgstr ""

#: ../../../en/how-to/mark.rst:15
msgid ":ref:`skip <skip>` - always skip a test function"
msgstr ""

#: ../../../en/how-to/mark.rst:16
msgid ""
":ref:`skipif <skipif>` - skip a test function if a certain condition is "
"met"
msgstr ""

#: ../../../en/how-to/mark.rst:17
msgid ""
":ref:`xfail <xfail>` - produce an \"expected failure\" outcome if a "
"certain condition is met"
msgstr ""

#: ../../../en/how-to/mark.rst:19
msgid ""
":ref:`parametrize <parametrizemark>` - perform multiple calls to the same"
" test function."
msgstr ""

#: ../../../en/how-to/mark.rst:22
msgid ""
"It's easy to create custom markers or to apply markers to whole test "
"classes or modules. Those markers can be used by plugins, and also are "
"commonly used to :ref:`select tests <mark run>` on the command-line with "
"the ``-m`` option."
msgstr ""

#: ../../../en/how-to/mark.rst:26
msgid "See :ref:`mark examples` for examples which also serve as documentation."
msgstr ""

#: ../../../en/how-to/mark.rst:30
msgid ""
"Marks can only be applied to tests, having no effect on :ref:`fixtures "
"<fixtures>`."
msgstr ""

#: ../../../en/how-to/mark.rst:35
msgid "Registering marks"
msgstr ""

#: ../../../en/how-to/mark.rst:37
msgid "You can register custom marks in your ``pytest.ini`` file like this:"
msgstr ""

#: ../../../en/how-to/mark.rst:46
msgid "or in your ``pyproject.toml`` file like this:"
msgstr ""

#: ../../../en/how-to/mark.rst:56
msgid ""
"Note that everything past the ``:`` after the mark name is an optional "
"description."
msgstr ""

#: ../../../en/how-to/mark.rst:58
msgid ""
"Alternatively, you can register new markers programmatically in a "
":ref:`pytest_configure <initialization-hooks>` hook:"
msgstr ""

#: ../../../en/how-to/mark.rst:69
msgid ""
"Registered marks appear in pytest's help text and do not emit warnings "
"(see the next section). It is recommended that third-party plugins always"
" :ref:`register their markers <registering-markers>`."
msgstr ""

#: ../../../en/how-to/mark.rst:75
msgid "Raising errors on unknown marks"
msgstr ""

#: ../../../en/how-to/mark.rst:77
msgid ""
"Unregistered marks applied with the ``@pytest.mark.name_of_the_mark`` "
"decorator will always emit a warning in order to avoid silently doing "
"something surprising due to mistyped names. As described in the previous "
"section, you can disable the warning for custom marks by registering them"
" in your ``pytest.ini`` file or using a custom ``pytest_configure`` hook."
msgstr ""

#: ../../../en/how-to/mark.rst:83
msgid ""
"When the ``--strict-markers`` command-line flag is passed, any unknown "
"marks applied with the ``@pytest.mark.name_of_the_mark`` decorator will "
"trigger an error. You can enforce this validation in your project by "
"adding ``--strict-markers`` to ``addopts``:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:4
msgid "How to monkeypatch/mock modules and environments"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:8
msgid ""
"Sometimes tests need to invoke functionality which depends on global "
"settings or which invokes code which cannot be easily tested such as "
"network access.  The ``monkeypatch`` fixture helps you to safely "
"set/delete an attribute, dictionary item or environment variable, or to "
"modify ``sys.path`` for importing."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:14
msgid ""
"The ``monkeypatch`` fixture provides these helper methods for safely "
"patching and mocking functionality in tests:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:17
msgid ""
":meth:`monkeypatch.setattr(obj, name, value, raising=True) "
"<pytest.MonkeyPatch.setattr>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:18
msgid ""
":meth:`monkeypatch.delattr(obj, name, raising=True) "
"<pytest.MonkeyPatch.delattr>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:19
msgid ""
":meth:`monkeypatch.setitem(mapping, name, value) "
"<pytest.MonkeyPatch.setitem>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:20
msgid ""
":meth:`monkeypatch.delitem(obj, name, raising=True) "
"<pytest.MonkeyPatch.delitem>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:21
msgid ""
":meth:`monkeypatch.setenv(name, value, prepend=None) "
"<pytest.MonkeyPatch.setenv>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:22
msgid ":meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:23
msgid ""
":meth:`monkeypatch.syspath_prepend(path) "
"<pytest.MonkeyPatch.syspath_prepend>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:24
msgid ":meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:25
msgid ":meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:28
msgid ""
"All modifications will be undone after the requesting test function or "
"fixture has finished. The ``raising`` parameter determines if a "
"``KeyError`` or ``AttributeError`` will be raised if the target of the "
"set/deletion operation does not exist."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:33
msgid "Consider the following scenarios:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:35
msgid ""
"1. Modifying the behavior of a function or the property of a class for a "
"test e.g. there is an API call or database connection you will not make "
"for a test but you know what the expected output should be. Use "
":py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` to patch the "
"function or property with your desired testing behavior. This can include"
" your own functions. Use :py:meth:`monkeypatch.delattr "
"<MonkeyPatch.delattr>` to remove the function or property for the test."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:41
msgid ""
"2. Modifying the values of dictionaries e.g. you have a global "
"configuration that you want to modify for certain test cases. Use "
":py:meth:`monkeypatch.setitem <MonkeyPatch.setitem>` to patch the "
"dictionary for the test. :py:meth:`monkeypatch.delitem "
"<MonkeyPatch.delitem>` can be used to remove items."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:45
msgid ""
"3. Modifying environment variables for a test e.g. to test program "
"behavior if an environment variable is missing, or to set multiple values"
" to a known variable. :py:meth:`monkeypatch.setenv <MonkeyPatch.setenv>` "
"and :py:meth:`monkeypatch.delenv <MonkeyPatch.delenv>` can be used for "
"these patches."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:50
msgid ""
"4. Use ``monkeypatch.setenv(\"PATH\", value, prepend=os.pathsep)`` to "
"modify ``$PATH``, and :py:meth:`monkeypatch.chdir <MonkeyPatch.chdir>` to"
" change the context of the current working directory during a test."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:54
msgid ""
"5. Use :py:meth:`monkeypatch.syspath_prepend "
"<MonkeyPatch.syspath_prepend>` to modify ``sys.path`` which will also "
"call ``pkg_resources.fixup_namespace_packages`` and "
":py:func:`importlib.invalidate_caches`."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:57
msgid ""
"6. Use :py:meth:`monkeypatch.context <MonkeyPatch.context>` to apply "
"patches only in a specific scope, which can help control teardown of "
"complex fixtures or patches to the stdlib."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:60
msgid ""
"See the `monkeypatch blog post`_ for some introduction material and a "
"discussion of its motivation."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:66
msgid "Monkeypatching functions"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:68
msgid ""
"Consider a scenario where you are working with user directories. In the "
"context of testing, you do not want your test to depend on the running "
"user. ``monkeypatch`` can be used to patch functions dependent on the "
"user to always return a specific value."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:73
msgid ""
"In this example, :py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` is "
"used to patch ``Path.home`` so that the known testing path "
"``Path(\"/abc\")`` is always used when the test is run. This removes any "
"dependency on the running user for testing purposes. "
":py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` must be called "
"before the function which will use the patched function is called. After "
"the test function finishes the ``Path.home`` modification will be undone."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:107
msgid "Monkeypatching returned objects: building mock classes"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:109
msgid ""
":py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` can be used in "
"conjunction with classes to mock returned objects from functions instead "
"of values. Imagine a simple function to take an API url and return the "
"json response."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:124
msgid ""
"We need to mock ``r``, the returned response object for testing purposes."
" The mock of ``r`` needs a ``.json()`` method which returns a dictionary."
" This can be done in our test file by defining a class to represent "
"``r``."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:163
msgid ""
"``monkeypatch`` applies the mock for ``requests.get`` with our "
"``mock_get`` function. The ``mock_get`` function returns an instance of "
"the ``MockResponse`` class, which has a ``json()`` method defined to "
"return a known testing dictionary and does not require any outside API "
"connection."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:168
msgid ""
"You can build the ``MockResponse`` class with the appropriate degree of "
"complexity for the scenario you are testing. For instance, it could "
"include an ``ok`` property that always returns ``True``, or return "
"different values from the ``json()`` mocked method based on input "
"strings."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:173
msgid "This mock can be shared across tests using a ``fixture``:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:208
msgid ""
"Furthermore, if the mock was designed to be applied to all tests, the "
"``fixture`` could be moved to a ``conftest.py`` file and use the with "
"``autouse=True`` option."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:213
msgid "Global patch example: preventing \"requests\" from remote operations"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:215
msgid ""
"If you want to prevent the \"requests\" library from performing http "
"requests in all your tests, you can do:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:229
msgid ""
"This autouse fixture will be executed for each test function and it will "
"delete the method ``request.session.Session.request`` so that any "
"attempts within tests to create http requests will fail."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:236
msgid ""
"Be advised that it is not recommended to patch builtin functions such as "
"``open``, ``compile``, etc., because it might break pytest's internals. "
"If that's unavoidable, passing ``--tb=native``, ``--assert=plain`` and "
"``--capture=no`` might help although there's no guarantee."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:243
msgid ""
"Mind that patching ``stdlib`` functions and some third-party libraries "
"used by pytest might break pytest itself, therefore in those cases it is "
"recommended to use :meth:`MonkeyPatch.context` to limit the patching to "
"the block you want tested:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:257
msgid "See :issue:`3290` for details."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:261
msgid "Monkeypatching environment variables"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:263
msgid ""
"If you are working with environment variables you often need to safely "
"change the values or delete them from the system for testing purposes. "
"``monkeypatch`` provides a mechanism to do this using the ``setenv`` and "
"``delenv`` method. Our example code to test:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:283
msgid ""
"There are two potential paths. First, the ``USER`` environment variable "
"is set to a value. Second, the ``USER`` environment variable does not "
"exist. Using ``monkeypatch`` both paths can be safely tested without "
"impacting the running environment:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:306
msgid ""
"This behavior can be moved into ``fixture`` structures and shared across "
"tests:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:335
msgid "Monkeypatching dictionaries"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:337
msgid ""
":py:meth:`monkeypatch.setitem <MonkeyPatch.setitem>` can be used to "
"safely set the values of dictionaries to specific values during tests. "
"Take this simplified connection string example:"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:351
msgid ""
"For testing purposes we can patch the ``DEFAULT_CONFIG`` dictionary to "
"specific values."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:374
msgid ""
"You can use the :py:meth:`monkeypatch.delitem <MonkeyPatch.delitem>` to "
"remove values."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:396
msgid ""
"The modularity of fixtures gives you the flexibility to define separate "
"fixtures for each potential mock and reference them in the needed tests."
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:444
msgid "API Reference"
msgstr ""

#: ../../../en/how-to/monkeypatch.rst:446
msgid "Consult the docs for the :class:`MonkeyPatch` class."
msgstr ""

#: ../../../en/how-to/nose.rst:4
msgid "How to run tests written for nose"
msgstr ""

#: ../../../en/how-to/nose.rst:6
msgid "``pytest`` has basic support for running tests written for nose_."
msgstr ""

#: ../../../en/how-to/nose.rst:9
msgid ""
"This functionality has been deprecated and is likely to be removed in "
"``pytest 8.x``."
msgstr ""

#: ../../../en/how-to/nose.rst:16
msgid "After :ref:`installation` type:"
msgstr ""

#: ../../../en/how-to/nose.rst:23
msgid ""
"and you should be able to run your nose style tests and make use of "
"pytest's capabilities."
msgstr ""

#: ../../../en/how-to/nose.rst:27
msgid "Supported nose Idioms"
msgstr ""

#: ../../../en/how-to/nose.rst:29
msgid ""
"``setup()`` and ``teardown()`` at module/class/method level: any function"
" or method called ``setup`` will be called during the setup phase for "
"each test, same for ``teardown``."
msgstr ""

#: ../../../en/how-to/nose.rst:30
msgid "``SkipTest`` exceptions and markers"
msgstr ""

#: ../../../en/how-to/nose.rst:31
msgid "setup/teardown decorators"
msgstr ""

#: ../../../en/how-to/nose.rst:32
msgid "``__test__`` attribute on modules/classes/functions"
msgstr ""

#: ../../../en/how-to/nose.rst:33
msgid "general usage of nose utilities"
msgstr ""

#: ../../../en/how-to/nose.rst:36
msgid "Unsupported idioms / known issues"
msgstr ""

#: ../../../en/how-to/nose.rst:38
msgid ""
"unittest-style ``setUp, tearDown, setUpClass, tearDownClass`` are "
"recognized only on ``unittest.TestCase`` classes but not on plain "
"classes.  ``nose`` supports these methods also on plain classes but "
"pytest deliberately does not.  As nose and pytest already both support "
"``setup_class, teardown_class, setup_method, teardown_method`` it doesn't"
" seem useful to duplicate the unittest-API like nose does. If you however"
" rather think pytest should support the unittest-spelling on plain "
"classes please post to :issue:`377`."
msgstr ""

#: ../../../en/how-to/nose.rst:47
msgid ""
"nose imports test modules with the same import path (e.g. "
"``tests.test_mode``) but different file system paths (e.g. "
"``tests/test_mode.py`` and ``other/tests/test_mode.py``) by extending "
"sys.path/import semantics.   pytest does not do that but there is "
"discussion in :issue:`268` for adding some support.  Note that `nose2 "
"choose to avoid this sys.path/import hackery "
"<https://nose2.readthedocs.io/en/latest/differences.html#test-discovery-"
"and-loading>`_."
msgstr ""

#: ../../../en/how-to/nose.rst:54
msgid ""
"If you place a conftest.py file in the root directory of your project (as"
" determined by pytest) pytest will run tests \"nose style\" against the "
"code below that directory by adding it to your ``sys.path`` instead of "
"running against your installed code."
msgstr ""

#: ../../../en/how-to/nose.rst:59
msgid ""
"You may find yourself wanting to do this if you ran ``python setup.py "
"install`` to set up your project, as opposed to ``python setup.py "
"develop`` or any of the package manager equivalents.  Installing with "
"develop in a virtual environment like tox is recommended over this "
"pattern."
msgstr ""

#: ../../../en/how-to/nose.rst:64
msgid ""
"nose-style doctests are not collected and executed correctly, also "
"doctest fixtures don't work."
msgstr ""

#: ../../../en/how-to/nose.rst:67
msgid "no nose-configuration is recognized."
msgstr ""

#: ../../../en/how-to/nose.rst:69
msgid ""
"``yield``-based methods are unsupported as of pytest 4.1.0.  They are "
"fundamentally incompatible with pytest because they don't support "
"fixtures properly since collection and test execution are separated."
msgstr ""

#: ../../../en/how-to/nose.rst:74
msgid "Migrating from nose to pytest"
msgstr ""

#: ../../../en/how-to/nose.rst:76
msgid ""
"`nose2pytest <https://github.com/pytest-dev/nose2pytest>`_ is a Python "
"script and pytest plugin to help convert Nose-based tests into pytest-"
"based tests. Specifically, the script transforms nose.tools.assert_* "
"function calls into raw assert statements, while preserving format of "
"original arguments as much as possible."
msgstr ""

#: ../../../en/how-to/output.rst:4
msgid "Managing pytest's output"
msgstr ""

#: ../../../en/how-to/output.rst:9
msgid "Modifying Python traceback printing"
msgstr ""

#: ../../../en/how-to/output.rst:11
msgid "Examples for modifying traceback printing:"
msgstr ""

#: ../../../en/how-to/output.rst:26
msgid ""
"The ``--full-trace`` causes very long traces to be printed on error "
"(longer than ``--tb=long``). It also ensures that a stack trace is "
"printed on **KeyboardInterrupt** (Ctrl+C). This is very useful if the "
"tests are taking too long and you interrupt them with Ctrl+C to find out "
"where the tests are *hanging*. By default no output will be shown "
"(because KeyboardInterrupt is caught by pytest). By using this option you"
" make sure a trace is shown."
msgstr ""

#: ../../../en/how-to/output.rst:36
msgid "Verbosity"
msgstr ""

#: ../../../en/how-to/output.rst:38
msgid ""
"The ``-v`` flag controls the verbosity of pytest output in various "
"aspects: test session progress, assertion details when tests fail, "
"fixtures details with ``--fixtures``, etc."
msgstr ""

#: ../../../en/how-to/output.rst:43
msgid "Consider this simple file:"
msgstr ""

#: ../../../en/how-to/output.rst:68
msgid ""
"Executing pytest normally gives us this output (we are skipping the "
"header to focus on the rest):"
msgstr ""

#: ../../../en/how-to/output.rst:119
msgid "Notice that:"
msgstr ""

#: ../../../en/how-to/output.rst:121
msgid ""
"Each test inside the file is shown by a single character in the output: "
"``.`` for passing, ``F`` for failure."
msgstr ""

#: ../../../en/how-to/output.rst:122
msgid ""
"``test_words_fail`` failed, and we are shown a short summary indicating "
"the index 2 of the two lists differ."
msgstr ""

#: ../../../en/how-to/output.rst:123
msgid ""
"``test_numbers_fail`` failed, and we are shown a summary of left/right "
"differences on dictionary items. Identical items are omitted."
msgstr ""

#: ../../../en/how-to/output.rst:124
msgid ""
"``test_long_text_fail`` failed, and the right hand side of the ``in`` "
"statement is truncated using ``...``` because it is longer than an "
"internal threshold (240 characters currently)."
msgstr ""

#: ../../../en/how-to/output.rst:127
msgid "Now we can increase pytest's verbosity:"
msgstr ""

#: ../../../en/how-to/output.rst:188 ../../../en/how-to/output.rst:258
msgid "Notice now that:"
msgstr ""

#: ../../../en/how-to/output.rst:190 ../../../en/how-to/output.rst:260
msgid "Each test inside the file gets its own line in the output."
msgstr ""

#: ../../../en/how-to/output.rst:191
msgid ""
"``test_words_fail`` now shows the two failing lists in full, in addition "
"to which index differs."
msgstr ""

#: ../../../en/how-to/output.rst:192
msgid ""
"``test_numbers_fail`` now shows a text diff of the two dictionaries, "
"truncated."
msgstr ""

#: ../../../en/how-to/output.rst:193
msgid ""
"``test_long_text_fail`` no longer truncates the right hand side of the "
"``in`` statement, because the internal threshold for truncation is larger"
" now (2400 characters currently)."
msgstr ""

#: ../../../en/how-to/output.rst:196
msgid "Now if we increase verbosity even more:"
msgstr ""

#: ../../../en/how-to/output.rst:261
msgid "``test_words_fail`` gives the same output as before in this case."
msgstr ""

#: ../../../en/how-to/output.rst:262
msgid "``test_numbers_fail`` now shows a full text diff of the two dictionaries."
msgstr ""

#: ../../../en/how-to/output.rst:263
msgid ""
"``test_long_text_fail`` also doesn't truncate on the right hand side as "
"before, but now pytest won't truncate any text at all, regardless of its "
"size."
msgstr ""

#: ../../../en/how-to/output.rst:266
msgid ""
"Those were examples of how verbosity affects normal test session output, "
"but verbosity also is used in other situations, for example you are shown"
" even fixtures that start with ``_`` if you use ``pytest --fixtures -v``."
msgstr ""

#: ../../../en/how-to/output.rst:269
msgid ""
"Using higher verbosity levels (``-vvv``, ``-vvvv``, ...) is supported, "
"but has no effect in pytest itself at the moment, however some plugins "
"might make use of higher verbosity."
msgstr ""

#: ../../../en/how-to/output.rst:275
msgid "Producing a detailed summary report"
msgstr ""

#: ../../../en/how-to/output.rst:277
msgid ""
"The ``-r`` flag can be used to display a \"short test summary info\" at "
"the end of the test session, making it easy in large test suites to get a"
" clear picture of all failures, skips, xfails, etc."
msgstr ""

#: ../../../en/how-to/output.rst:280
msgid "It defaults to ``fE`` to list failures and errors."
msgstr ""

#: ../../../en/how-to/output.rst:358
msgid ""
"The ``-r`` options accepts a number of characters after it, with ``a`` "
"used above meaning \"all except passes\"."
msgstr ""

#: ../../../en/how-to/output.rst:361
msgid "Here is the full list of available characters that can be used:"
msgstr ""

#: ../../../en/how-to/output.rst:363
msgid "``f`` - failed"
msgstr ""

#: ../../../en/how-to/output.rst:364
msgid "``E`` - error"
msgstr ""

#: ../../../en/how-to/output.rst:365
msgid "``s`` - skipped"
msgstr ""

#: ../../../en/how-to/output.rst:366
msgid "``x`` - xfailed"
msgstr ""

#: ../../../en/how-to/output.rst:367
msgid "``X`` - xpassed"
msgstr ""

#: ../../../en/how-to/output.rst:368
msgid "``p`` - passed"
msgstr ""

#: ../../../en/how-to/output.rst:369
msgid "``P`` - passed with output"
msgstr ""

#: ../../../en/how-to/output.rst:371
msgid "Special characters for (de)selection of groups:"
msgstr ""

#: ../../../en/how-to/output.rst:373
msgid "``a`` - all except ``pP``"
msgstr ""

#: ../../../en/how-to/output.rst:374
msgid "``A`` - all"
msgstr ""

#: ../../../en/how-to/output.rst:375
msgid ""
"``N`` - none, this can be used to display nothing (since ``fE`` is the "
"default)"
msgstr ""

#: ../../../en/how-to/output.rst:377
msgid ""
"More than one character can be used, so for example to only see failed "
"and skipped tests, you can execute:"
msgstr ""

#: ../../../en/how-to/output.rst:411
msgid ""
"Using ``p`` lists the passing tests, whilst ``P`` adds an extra section "
"\"PASSES\" with those tests that passed but had captured output:"
msgstr ""

#: ../../../en/how-to/output.rst:450
msgid "Creating resultlog format files"
msgstr ""

#: ../../../en/how-to/output.rst:452
msgid "To create plain-text machine-readable result files you can issue:"
msgstr ""

#: ../../../en/how-to/output.rst:458
msgid ""
"and look at the content at the ``path`` location.  Such files are used "
"e.g. by the `PyPy-test`_ web page to show test results over several "
"revisions."
msgstr ""

#: ../../../en/how-to/output.rst:463
msgid "This option is rarely used and is scheduled for removal in pytest 6.0."
msgstr ""

#: ../../../en/how-to/output.rst:465
msgid ""
"If you use this option, consider using the new `pytest-reportlog "
"<https://github.com/pytest-dev/pytest-reportlog>`__ plugin instead."
msgstr ""

#: ../../../en/how-to/output.rst:467
msgid ""
"See :ref:`the deprecation docs <resultlog deprecated>` for more "
"information."
msgstr ""

#: ../../../en/how-to/output.rst:474
msgid "Creating JUnitXML format files"
msgstr ""

#: ../../../en/how-to/output.rst:476
msgid ""
"To create result files which can be read by Jenkins_ or other Continuous "
"integration servers, use this invocation:"
msgstr ""

#: ../../../en/how-to/output.rst:483
msgid "to create an XML file at ``path``."
msgstr ""

#: ../../../en/how-to/output.rst:487
msgid ""
"To set the name of the root test suite xml item, you can configure the "
"``junit_suite_name`` option in your config file:"
msgstr ""

#: ../../../en/how-to/output.rst:496
msgid ""
"JUnit XML specification seems to indicate that ``\"time\"`` attribute "
"should report total test execution times, including setup and teardown "
"(`1 <http://windyroad.com.au/dl/Open%20Source/JUnit.xsd>`_, `2 "
"<https://www.ibm.com/support/knowledgecenter/en/SSQ2R2_14.1.0/com.ibm.rsar.analysis.codereview.cobol.doc/topics/cac_useresults_junit.html>`_)."
" It is the default pytest behavior. To report just call durations "
"instead, configure the ``junit_duration_report`` option like this:"
msgstr ""

#: ../../../en/how-to/output.rst:511
msgid "record_property"
msgstr ""

#: ../../../en/how-to/output.rst:513
msgid ""
"If you want to log additional information for a test, you can use the "
"``record_property`` fixture:"
msgstr ""

#: ../../../en/how-to/output.rst:522
msgid ""
"This will add an extra property ``example_key=\"1\"`` to the generated "
"``testcase`` tag:"
msgstr ""

#: ../../../en/how-to/output.rst:533
msgid "Alternatively, you can integrate this functionality with custom markers:"
msgstr ""

#: ../../../en/how-to/output.rst:546
msgid "And in your tests:"
msgstr ""

#: ../../../en/how-to/output.rst:558
msgid "Will result in:"
msgstr ""

#: ../../../en/how-to/output.rst:570 ../../../en/how-to/output.rst:634
msgid ""
"Please note that using this feature will break schema verifications for "
"the latest JUnitXML schema. This might be a problem when used with some "
"CI servers."
msgstr ""

#: ../../../en/how-to/output.rst:575
msgid "record_xml_attribute"
msgstr ""

#: ../../../en/how-to/output.rst:577
msgid ""
"To add an additional xml attribute to a testcase element, you can use "
"``record_xml_attribute`` fixture. This can also be used to override "
"existing values:"
msgstr ""

#: ../../../en/how-to/output.rst:588
msgid ""
"Unlike ``record_property``, this will not add a new child element. "
"Instead, this will add an attribute ``assertions=\"REQ-1234\"`` inside "
"the generated ``testcase`` tag and override the default ``classname`` "
"with ``\"classname=custom_classname\"``:"
msgstr ""

#: ../../../en/how-to/output.rst:602
msgid ""
"``record_xml_attribute`` is an experimental feature, and its interface "
"might be replaced by something more powerful and general in future "
"versions. The functionality per-se will be kept, however."
msgstr ""

#: ../../../en/how-to/output.rst:606
msgid ""
"Using this over ``record_xml_property`` can help when using ci tools to "
"parse the xml report. However, some parsers are quite strict about the "
"elements and attributes that are allowed. Many tools use an xsd schema "
"(like the example below) to validate incoming xml. Make sure you are "
"using attribute names that are allowed by your parser."
msgstr ""

#: ../../../en/how-to/output.rst:611
msgid "Below is the Scheme used by Jenkins to validate the XML report:"
msgstr ""

#: ../../../en/how-to/output.rst:640
msgid "record_testsuite_property"
msgstr ""

#: ../../../en/how-to/output.rst:644
msgid ""
"If you want to add a properties node at the test-suite level, which may "
"contains properties that are relevant to all tests, you can use the "
"``record_testsuite_property`` session-scoped fixture:"
msgstr ""

#: ../../../en/how-to/output.rst:647
msgid ""
"The ``record_testsuite_property`` session-scoped fixture can be used to "
"add properties relevant to all tests."
msgstr ""

#: ../../../en/how-to/output.rst:665
msgid ""
"The fixture is a callable which receives ``name`` and ``value`` of a "
"``<property>`` tag added at the test-suite level of the generated xml:"
msgstr ""

#: ../../../en/how-to/output.rst:678
msgid ""
"``name`` must be a string, ``value`` will be converted to a string and "
"properly xml-escaped."
msgstr ""

#: ../../../en/how-to/output.rst:680
msgid ""
"The generated XML is compatible with the latest ``xunit`` standard, "
"contrary to `record_property`_ and `record_xml_attribute`_."
msgstr ""

#: ../../../en/how-to/output.rst:685
msgid "Sending test report to an online pastebin service"
msgstr ""

#: ../../../en/how-to/output.rst:687
msgid "**Creating a URL for each test failure**:"
msgstr ""

#: ../../../en/how-to/output.rst:693
msgid ""
"This will submit test run information to a remote Paste service and "
"provide a URL for each failure.  You may select tests as usual or add for"
" example ``-x`` if you only want to send one particular failure."
msgstr ""

#: ../../../en/how-to/output.rst:697
msgid "**Creating a URL for a whole test session log**:"
msgstr ""

#: ../../../en/how-to/output.rst:703
msgid "Currently only pasting to the https://bpaste.net/ service is implemented."
msgstr ""

#: ../../../en/how-to/output.rst:707
msgid ""
"If creating the URL fails for any reason, a warning is generated instead "
"of failing the entire test suite."
msgstr ""

#: ../../../en/how-to/parametrize.rst:10
msgid "How to parametrize fixtures and test functions"
msgstr ""

#: ../../../en/how-to/parametrize.rst:12
msgid "pytest enables test parametrization at several levels:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:14
msgid ""
":py:func:`pytest.fixture` allows one to :ref:`parametrize fixture "
"functions <fixture-parametrize>`."
msgstr ""

#: ../../../en/how-to/parametrize.rst:17
msgid ""
"`@pytest.mark.parametrize`_ allows one to define multiple sets of "
"arguments and fixtures at the test function or class."
msgstr ""

#: ../../../en/how-to/parametrize.rst:20
msgid ""
"`pytest_generate_tests`_ allows one to define custom parametrization "
"schemes or extensions."
msgstr ""

#: ../../../en/how-to/parametrize.rst:28
msgid "``@pytest.mark.parametrize``: parametrizing test functions"
msgstr ""

#: ../../../en/how-to/parametrize.rst:36
msgid ""
"The builtin :ref:`pytest.mark.parametrize ref` decorator enables "
"parametrization of arguments for a test function.  Here is a typical "
"example of a test function that implements checking that a certain input "
"leads to an expected output:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:51
msgid ""
"Here, the ``@parametrize`` decorator defines three different "
"``(test_input,expected)`` tuples so that the ``test_eval`` function will "
"run three times using them in turn:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:83
msgid "Parameter values are passed as-is to tests (no copy whatsoever)."
msgstr ""

#: ../../../en/how-to/parametrize.rst:85
msgid ""
"For example, if you pass a list or a dict as a parameter value, and the "
"test case code mutates it, the mutations will be reflected in subsequent "
"test case calls."
msgstr ""

#: ../../../en/how-to/parametrize.rst:91
msgid ""
"pytest by default escapes any non-ascii characters used in unicode "
"strings for the parametrization because it has several downsides. If "
"however you would like to use unicode strings in parametrization and see "
"them in the terminal as is (non-escaped), use this option in your "
"``pytest.ini``:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:102
msgid ""
"Keep in mind however that this might cause unwanted side effects and even"
" bugs depending on the OS used and plugins currently installed, so use it"
" at your own risk."
msgstr ""

#: ../../../en/how-to/parametrize.rst:107
msgid ""
"As designed in this example, only one pair of input/output values fails "
"the simple test function.  And as usual with test function arguments, you"
" can see the ``input`` and ``output`` values in the traceback."
msgstr ""

#: ../../../en/how-to/parametrize.rst:111
msgid ""
"Note that you could also use the parametrize marker on a class or a "
"module (see :ref:`mark`) which would invoke several functions with the "
"argument sets, for instance:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:130
msgid ""
"To parametrize all tests in a module, you can assign to the "
":globalvar:`pytestmark` global variable:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:148
msgid ""
"It is also possible to mark individual test instances within parametrize,"
" for example with the builtin ``mark.xfail``:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:164
msgid "Let's run this:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:178
msgid ""
"The one parameter set which caused a failure previously now shows up as "
"an \"xfailed\" (expected to fail) test."
msgstr ""

#: ../../../en/how-to/parametrize.rst:181
msgid ""
"In case the values provided to ``parametrize`` result in an empty list - "
"for example, if they're dynamically generated by some function - the "
"behaviour of pytest is defined by the :confval:`empty_parameter_set_mark`"
" option."
msgstr ""

#: ../../../en/how-to/parametrize.rst:185
msgid ""
"To get all combinations of multiple parametrized arguments you can stack "
"``parametrize`` decorators:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:198
msgid ""
"This will run the test with the arguments set to ``x=0/y=2``, "
"``x=1/y=2``, ``x=0/y=3``, and ``x=1/y=3`` exhausting parameters in the "
"order of the decorators."
msgstr ""

#: ../../../en/how-to/parametrize.rst:204
msgid "Basic ``pytest_generate_tests`` example"
msgstr ""

#: ../../../en/how-to/parametrize.rst:206
msgid ""
"Sometimes you may want to implement your own parametrization scheme or "
"implement some dynamism for determining the parameters or scope of a "
"fixture.   For this, you can use the ``pytest_generate_tests`` hook which"
" is called when collecting a test function.  Through the passed in "
"``metafunc`` object you can inspect the requesting test context and, most"
" importantly, you can call ``metafunc.parametrize()`` to cause "
"parametrization."
msgstr ""

#: ../../../en/how-to/parametrize.rst:214
msgid ""
"For example, let's say we want to run a test taking string inputs which "
"we want to set via a new ``pytest`` command line option.  Let's first "
"write a simple test accepting a ``stringinput`` fixture function "
"argument:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:226
msgid ""
"Now we add a ``conftest.py`` file containing the addition of a command "
"line option and the parametrization of our test function:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:247
msgid "If we now pass two stringinput values, our test will run twice:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:255
msgid "Let's also run with a stringinput that will lead to a failing test:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:277
msgid "As expected our test function fails."
msgstr ""

#: ../../../en/how-to/parametrize.rst:279
msgid ""
"If you don't specify a stringinput it will be skipped because "
"``metafunc.parametrize()`` will be called with an empty parameter list:"
msgstr ""

#: ../../../en/how-to/parametrize.rst:291
msgid ""
"Note that when calling ``metafunc.parametrize`` multiple times with "
"different parameter sets, all parameter names across those sets cannot be"
" duplicated, otherwise an error will be raised."
msgstr ""

#: ../../../en/how-to/parametrize.rst:295
msgid "More examples"
msgstr ""

#: ../../../en/how-to/parametrize.rst:297
msgid ""
"For further examples, you might want to look at :ref:`more "
"parametrization examples <paramexamples>`."
msgstr ""

#: ../../../en/how-to/plugins.rst:6
msgid "How to install and use plugins"
msgstr ""

#: ../../../en/how-to/plugins.rst:8
msgid ""
"This section talks about installing and using third party plugins. For "
"writing your own plugins, please refer to :ref:`writing-plugins`."
msgstr ""

#: ../../../en/how-to/plugins.rst:11
msgid "Installing a third party plugin can be easily done with ``pip``:"
msgstr ""

#: ../../../en/how-to/plugins.rst:18
msgid ""
"If a plugin is installed, ``pytest`` automatically finds and integrates "
"it, there is no need to activate it."
msgstr ""

#: ../../../en/how-to/plugins.rst:21
msgid "Here is a little annotated list for some popular plugins:"
msgstr ""

#: ../../../en/how-to/plugins.rst:23
msgid ""
":pypi:`pytest-django`: write tests for `django "
"<https://docs.djangoproject.com/>`_ apps, using pytest integration."
msgstr ""

#: ../../../en/how-to/plugins.rst:26
msgid ""
":pypi:`pytest-twisted`: write tests for `twisted "
"<https://twistedmatrix.com/>`_ apps, starting a reactor and processing "
"deferreds from test functions."
msgstr ""

#: ../../../en/how-to/plugins.rst:30
msgid ""
":pypi:`pytest-cov`: coverage reporting, compatible with distributed "
"testing"
msgstr ""

#: ../../../en/how-to/plugins.rst:33
msgid ""
":pypi:`pytest-xdist`: to distribute tests to CPUs and remote hosts, to "
"run in boxed mode which allows to survive segmentation faults, to run in "
"looponfailing mode, automatically re-running failing tests on file "
"changes."
msgstr ""

#: ../../../en/how-to/plugins.rst:39
msgid ""
":pypi:`pytest-instafail`: to report failures while the test run is "
"happening."
msgstr ""

#: ../../../en/how-to/plugins.rst:42
msgid ":pypi:`pytest-bdd`: to write tests using behaviour-driven testing."
msgstr ""

#: ../../../en/how-to/plugins.rst:45
msgid ""
":pypi:`pytest-timeout`: to timeout tests based on function marks or "
"global definitions."
msgstr ""

#: ../../../en/how-to/plugins.rst:48
msgid ""
":pypi:`pytest-pep8`: a ``--pep8`` option to enable PEP8 compliance "
"checking."
msgstr ""

#: ../../../en/how-to/plugins.rst:51
msgid ":pypi:`pytest-flakes`: check source code with pyflakes."
msgstr ""

#: ../../../en/how-to/plugins.rst:54
msgid ""
":pypi:`allure-pytest`: report test results via `allure-framework "
"<https://github.com/allure-framework/>`_."
msgstr ""

#: ../../../en/how-to/plugins.rst:57
msgid ""
"To see a complete list of all plugins with their latest testing status "
"against different pytest and Python versions, please visit :ref:`plugin-"
"list`."
msgstr ""

#: ../../../en/how-to/plugins.rst:61
msgid "You may also discover more plugins through a `pytest- pypi.org search`_."
msgstr ""

#: ../../../en/how-to/plugins.rst:69 ../../../en/how-to/writing_plugins.rst:246
msgid "Requiring/Loading plugins in a test module or conftest file"
msgstr ""

#: ../../../en/how-to/plugins.rst:71
msgid ""
"You can require plugins in a test module or a conftest file using "
":globalvar:`pytest_plugins`:"
msgstr ""

#: ../../../en/how-to/plugins.rst:77
msgid ""
"When the test module or conftest plugin is loaded the specified plugins "
"will be loaded as well."
msgstr ""

#: ../../../en/how-to/plugins.rst:82
msgid ""
"Requiring plugins using a ``pytest_plugins`` variable in non-root "
"``conftest.py`` files is deprecated. See :ref:`full explanation "
"<requiring plugins in non-root conftests>` in the Writing plugins "
"section."
msgstr ""

#: ../../../en/how-to/plugins.rst:88
msgid ""
"The name ``pytest_plugins`` is reserved and should not be used as a name "
"for a custom plugin module."
msgstr ""

#: ../../../en/how-to/plugins.rst:95
msgid "Finding out which plugins are active"
msgstr ""

#: ../../../en/how-to/plugins.rst:97
msgid ""
"If you want to find out which plugins are active in your environment you "
"can type:"
msgstr ""

#: ../../../en/how-to/plugins.rst:104
msgid ""
"and will get an extended test header which shows activated plugins and "
"their names. It will also print local plugins aka :ref:`conftest.py "
"<conftest.py plugins>` files when they are loaded."
msgstr ""

#: ../../../en/how-to/plugins.rst:111
msgid "Deactivating / unregistering a plugin by name"
msgstr ""

#: ../../../en/how-to/plugins.rst:113
msgid "You can prevent plugins from loading or unregister them:"
msgstr ""

#: ../../../en/how-to/plugins.rst:119
msgid ""
"This means that any subsequent try to activate/load the named plugin will"
" not work."
msgstr ""

#: ../../../en/how-to/plugins.rst:122
msgid ""
"If you want to unconditionally disable a plugin for a project, you can "
"add this option to your ``pytest.ini`` file:"
msgstr ""

#: ../../../en/how-to/plugins.rst:130
msgid ""
"Alternatively to disable it only in certain environments (for example in "
"a CI server), you can set ``PYTEST_ADDOPTS`` environment variable to ``-p"
" no:name``."
msgstr ""

#: ../../../en/how-to/plugins.rst:134
msgid "See :ref:`findpluginname` for how to obtain the name of a plugin."
msgstr ""

#: ../../../en/how-to/skipping.rst:6
msgid "How to use skip and xfail to deal with tests that cannot succeed"
msgstr ""

#: ../../../en/how-to/skipping.rst:8
msgid ""
"You can mark test functions that cannot be run on certain platforms or "
"that you expect to fail so pytest can deal with them accordingly and "
"present a summary of the test session, while keeping the test suite "
"*green*."
msgstr ""

#: ../../../en/how-to/skipping.rst:12
msgid ""
"A **skip** means that you expect your test to pass only if some "
"conditions are met, otherwise pytest should skip running the test "
"altogether. Common examples are skipping windows-only tests on non-"
"windows platforms, or skipping tests that depend on an external resource "
"which is not available at the moment (for example a database)."
msgstr ""

#: ../../../en/how-to/skipping.rst:17
msgid ""
"An **xfail** means that you expect a test to fail for some reason. A "
"common example is a test for a feature not yet implemented, or a bug not "
"yet fixed. When a test passes despite being expected to fail (marked with"
" ``pytest.mark.xfail``), it's an **xpass** and will be reported in the "
"test summary."
msgstr ""

#: ../../../en/how-to/skipping.rst:22
msgid ""
"``pytest`` counts and lists *skip* and *xfail* tests separately. Detailed"
" information about skipped/xfailed tests is not shown by default to avoid"
" cluttering the output.  You can use the ``-r`` option to see details "
"corresponding to the \"short\" letters shown in the test progress:"
msgstr ""

#: ../../../en/how-to/skipping.rst:31
msgid "More details on the ``-r`` option can be found by running ``pytest -h``."
msgstr ""

#: ../../../en/how-to/skipping.rst:33
msgid "(See :ref:`how to change command line options defaults`)"
msgstr ""

#: ../../../en/how-to/skipping.rst:40
msgid "Skipping test functions"
msgstr ""

#: ../../../en/how-to/skipping.rst:44
msgid ""
"The simplest way to skip a test function is to mark it with the ``skip`` "
"decorator which may be passed an optional ``reason``:"
msgstr ""

#: ../../../en/how-to/skipping.rst:54
msgid ""
"Alternatively, it is also possible to skip imperatively during test "
"execution or setup by calling the ``pytest.skip(reason)`` function:"
msgstr ""

#: ../../../en/how-to/skipping.rst:63
msgid ""
"The imperative method is useful when it is not possible to evaluate the "
"skip condition during import time."
msgstr ""

#: ../../../en/how-to/skipping.rst:66
msgid ""
"It is also possible to skip the whole module using ``pytest.skip(reason, "
"allow_module_level=True)`` at the module level:"
msgstr ""

#: ../../../en/how-to/skipping.rst:79
msgid "**Reference**: :ref:`pytest.mark.skip ref`"
msgstr ""

#: ../../../en/how-to/skipping.rst:82
msgid "``skipif``"
msgstr ""

#: ../../../en/how-to/skipping.rst:86
msgid ""
"If you wish to skip something conditionally then you can use ``skipif`` "
"instead. Here is an example of marking a test function to be skipped when"
" run on an interpreter earlier than Python3.10:"
msgstr ""

#: ../../../en/how-to/skipping.rst:99
msgid ""
"If the condition evaluates to ``True`` during collection, the test "
"function will be skipped, with the specified reason appearing in the "
"summary when using ``-rs``."
msgstr ""

#: ../../../en/how-to/skipping.rst:102
msgid ""
"You can share ``skipif`` markers between modules.  Consider this test "
"module:"
msgstr ""

#: ../../../en/how-to/skipping.rst:118
msgid "You can import the marker and reuse it in another test module:"
msgstr ""

#: ../../../en/how-to/skipping.rst:130
msgid ""
"For larger test suites it's usually a good idea to have one file where "
"you define the markers which you then consistently apply throughout your "
"test suite."
msgstr ""

#: ../../../en/how-to/skipping.rst:134
msgid ""
"Alternatively, you can use :ref:`condition strings <string conditions>` "
"instead of booleans, but they can't be shared between modules easily so "
"they are supported mainly for backward compatibility reasons."
msgstr ""

#: ../../../en/how-to/skipping.rst:138
msgid "**Reference**: :ref:`pytest.mark.skipif ref`"
msgstr ""

#: ../../../en/how-to/skipping.rst:142
msgid "Skip all test functions of a class or module"
msgstr ""

#: ../../../en/how-to/skipping.rst:144
msgid "You can use the ``skipif`` marker (as any other marker) on classes:"
msgstr ""

#: ../../../en/how-to/skipping.rst:153
msgid ""
"If the condition is ``True``, this marker will produce a skip result for "
"each of the test methods of that class."
msgstr ""

#: ../../../en/how-to/skipping.rst:156
msgid ""
"If you want to skip all test functions of a module, you may use the "
":globalvar:`pytestmark` global:"
msgstr ""

#: ../../../en/how-to/skipping.rst:164
msgid ""
"If multiple ``skipif`` decorators are applied to a test function, it will"
" be skipped if any of the skip conditions is true."
msgstr ""

#: ../../../en/how-to/skipping.rst:171
msgid "Skipping files or directories"
msgstr ""

#: ../../../en/how-to/skipping.rst:173
msgid ""
"Sometimes you may need to skip an entire file or directory, for example "
"if the tests rely on Python version-specific features or contain code "
"that you do not wish pytest to run. In this case, you must exclude the "
"files and directories from collection. Refer to :ref:`customizing-test-"
"collection` for more information."
msgstr ""

#: ../../../en/how-to/skipping.rst:181
msgid "Skipping on a missing import dependency"
msgstr ""

#: ../../../en/how-to/skipping.rst:183
msgid ""
"You can skip tests on a missing import by using :ref:`pytest.importorskip"
" ref` at module level, within a test, or test setup function."
msgstr ""

#: ../../../en/how-to/skipping.rst:190
msgid ""
"If ``docutils`` cannot be imported here, this will lead to a skip outcome"
" of the test. You can also skip based on the version number of a library:"
msgstr ""

#: ../../../en/how-to/skipping.rst:197
msgid ""
"The version will be read from the specified module's ``__version__`` "
"attribute."
msgstr ""

#: ../../../en/how-to/skipping.rst:201
msgid "Summary"
msgstr ""

#: ../../../en/how-to/skipping.rst:203
msgid ""
"Here's a quick guide on how to skip tests in a module in different "
"situations:"
msgstr ""

#: ../../../en/how-to/skipping.rst:205
msgid "Skip all tests in a module unconditionally:"
msgstr ""

#: ../../../en/how-to/skipping.rst:211
msgid "Skip all tests in a module based on some condition:"
msgstr ""

#: ../../../en/how-to/skipping.rst:217
msgid "Skip all tests in a module if some import is missing:"
msgstr ""

#: ../../../en/how-to/skipping.rst:227
msgid "XFail: mark test functions as expected to fail"
msgstr ""

#: ../../../en/how-to/skipping.rst:229
msgid ""
"You can use the ``xfail`` marker to indicate that you expect a test to "
"fail:"
msgstr ""

#: ../../../en/how-to/skipping.rst:238
msgid ""
"This test will run but no traceback will be reported when it fails. "
"Instead, terminal reporting will list it in the \"expected to fail\" "
"(``XFAIL``) or \"unexpectedly passing\" (``XPASS``) sections."
msgstr ""

#: ../../../en/how-to/skipping.rst:242
msgid ""
"Alternatively, you can also mark a test as ``XFAIL`` from within the test"
" or its setup function imperatively:"
msgstr ""

#: ../../../en/how-to/skipping.rst:259
msgid ""
"These two examples illustrate situations where you don't want to check "
"for a condition at the module level, which is when a condition would "
"otherwise be evaluated for marks."
msgstr ""

#: ../../../en/how-to/skipping.rst:262
msgid ""
"This will make ``test_function`` ``XFAIL``. Note that no other code is "
"executed after the :func:`pytest.xfail` call, differently from the "
"marker. That's because it is implemented internally by raising a known "
"exception."
msgstr ""

#: ../../../en/how-to/skipping.rst:266
msgid "**Reference**: :ref:`pytest.mark.xfail ref`"
msgstr ""

#: ../../../en/how-to/skipping.rst:270
msgid "``condition`` parameter"
msgstr ""

#: ../../../en/how-to/skipping.rst:272
msgid ""
"If a test is only expected to fail under a certain condition, you can "
"pass that condition as the first parameter:"
msgstr ""

#: ../../../en/how-to/skipping.rst:281
msgid ""
"Note that you have to pass a reason as well (see the parameter "
"description at :ref:`pytest.mark.xfail ref`)."
msgstr ""

#: ../../../en/how-to/skipping.rst:285
msgid "``reason`` parameter"
msgstr ""

#: ../../../en/how-to/skipping.rst:287
msgid ""
"You can specify the motive of an expected failure with the ``reason`` "
"parameter:"
msgstr ""

#: ../../../en/how-to/skipping.rst:297
msgid "``raises`` parameter"
msgstr ""

#: ../../../en/how-to/skipping.rst:299
msgid ""
"If you want to be more specific as to why the test is failing, you can "
"specify a single exception, or a tuple of exceptions, in the ``raises`` "
"argument."
msgstr ""

#: ../../../en/how-to/skipping.rst:308
msgid ""
"Then the test will be reported as a regular failure if it fails with an "
"exception not mentioned in ``raises``."
msgstr ""

#: ../../../en/how-to/skipping.rst:312
msgid "``run`` parameter"
msgstr ""

#: ../../../en/how-to/skipping.rst:314
msgid ""
"If a test should be marked as xfail and reported as such but should not "
"be even executed, use the ``run`` parameter as ``False``:"
msgstr ""

#: ../../../en/how-to/skipping.rst:323
msgid ""
"This is specially useful for xfailing tests that are crashing the "
"interpreter and should be investigated later."
msgstr ""

#: ../../../en/how-to/skipping.rst:329
msgid "``strict`` parameter"
msgstr ""

#: ../../../en/how-to/skipping.rst:331
msgid ""
"Both ``XFAIL`` and ``XPASS`` don't fail the test suite by default. You "
"can change this by setting the ``strict`` keyword-only parameter to "
"``True``:"
msgstr ""

#: ../../../en/how-to/skipping.rst:341
msgid ""
"This will make ``XPASS`` (\"unexpectedly passing\") results from this "
"test to fail the test suite."
msgstr ""

#: ../../../en/how-to/skipping.rst:343
msgid ""
"You can change the default value of the ``strict`` parameter using the "
"``xfail_strict`` ini option:"
msgstr ""

#: ../../../en/how-to/skipping.rst:353
msgid "Ignoring xfail"
msgstr ""

#: ../../../en/how-to/skipping.rst:355
msgid "By specifying on the commandline:"
msgstr ""

#: ../../../en/how-to/skipping.rst:361
msgid ""
"you can force the running and reporting of an ``xfail`` marked test as if"
" it weren't marked at all. This also causes :func:`pytest.xfail` to "
"produce no effect."
msgstr ""

#: ../../../en/how-to/skipping.rst:365
msgid "Examples"
msgstr ""

#: ../../../en/how-to/skipping.rst:367
msgid "Here is a simple test file with the several usages:"
msgstr ""

#: ../../../en/how-to/skipping.rst:371
msgid "Running it with the report-on-xfail option gives this output:"
msgstr ""

#: ../../../en/how-to/skipping.rst:405
msgid "Skip/xfail with parametrize"
msgstr ""

#: ../../../en/how-to/skipping.rst:407
msgid ""
"It is possible to apply markers like skip and xfail to individual test "
"instances when using parametrize:"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:6
msgid "How to use temporary directories and files in tests"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:9
msgid "The ``tmp_path`` fixture"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:11
msgid ""
"You can use the ``tmp_path`` fixture which will provide a temporary "
"directory unique to the test invocation, created in the `base temporary "
"directory`_."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:15
msgid ""
"``tmp_path`` is a :class:`pathlib.Path` object. Here is an example test "
"usage:"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:32
msgid ""
"Running this would result in a passed test except for the last ``assert "
"0`` line which we use to look at values:"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:68
msgid "The ``tmp_path_factory`` fixture"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:70
msgid ""
"The ``tmp_path_factory`` is a session-scoped fixture which can be used to"
" create arbitrary temporary directories from any other fixture or test."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:73
msgid ""
"For example, suppose your test suite needs a large image on disk, which "
"is generated procedurally. Instead of computing the same image for each "
"test that uses it into its own ``tmp_path``, you can generate it once "
"per-session to save time:"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:97
msgid ""
"See :ref:`tmp_path_factory API <tmp_path_factory factory api>` for "
"details."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:103
msgid "The ``tmpdir`` and ``tmpdir_factory`` fixtures"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:105
msgid ""
"The ``tmpdir`` and ``tmpdir_factory`` fixtures are similar to "
"``tmp_path`` and ``tmp_path_factory``, but use/return legacy "
"`py.path.local`_ objects rather than standard :class:`pathlib.Path` "
"objects."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:110
msgid "These days, it is preferred to use ``tmp_path`` and ``tmp_path_factory``."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:112
msgid ""
"In order to help modernize old code bases, one can run pytest with the "
"legacypath plugin disabled:"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:119
msgid ""
"This will trigger errors on tests using the legacy paths. It can also be "
"permanently set as part of the :confval:`addopts` parameter in the config"
" file."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:123
msgid ""
"See :fixture:`tmpdir <tmpdir>` :fixture:`tmpdir_factory <tmpdir_factory>`"
" API for details."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:130
msgid "The default base temporary directory"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:132
msgid ""
"Temporary directories are by default created as sub-directories of the "
"system temporary directory.  The base name will be ``pytest-NUM`` where "
"``NUM`` will be incremented with each test run.  Moreover, entries older "
"than 3 temporary directories will be removed."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:137
msgid ""
"The number of entries currently cannot be changed, but using the "
"``--basetemp`` option will remove the directory before every run, "
"effectively meaning the temporary directories of only the most recent run"
" will be kept."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:141
msgid "You can override the default temporary directory setting like this:"
msgstr ""

#: ../../../en/how-to/tmp_path.rst:149
msgid ""
"The contents of ``mydir`` will be completely removed, so make sure to use"
" a directory for that purpose only."
msgstr ""

#: ../../../en/how-to/tmp_path.rst:152
msgid ""
"When distributing tests on the local machine using ``pytest-xdist``, care"
" is taken to automatically configure a basetemp directory for the sub "
"processes such that all temporary data lands below a single per-test run "
"basetemp directory."
msgstr ""

#: ../../../en/how-to/unittest.rst:6
msgid "How to use ``unittest``-based tests with pytest"
msgstr ""

#: ../../../en/how-to/unittest.rst:8
msgid ""
"``pytest`` supports running Python ``unittest``-based tests out of the "
"box. It's meant for leveraging existing ``unittest``-based test suites to"
" use pytest as a test runner and also allow to incrementally adapt the "
"test suite to take full advantage of pytest's features."
msgstr ""

#: ../../../en/how-to/unittest.rst:13
msgid "To run an existing ``unittest``-style test suite using ``pytest``, type:"
msgstr ""

#: ../../../en/how-to/unittest.rst:20
msgid ""
"pytest will automatically collect ``unittest.TestCase`` subclasses and "
"their ``test`` methods in ``test_*.py`` or ``*_test.py`` files."
msgstr ""

#: ../../../en/how-to/unittest.rst:23
msgid "Almost all ``unittest`` features are supported:"
msgstr ""

#: ../../../en/how-to/unittest.rst:25
msgid "``@unittest.skip`` style decorators;"
msgstr ""

#: ../../../en/how-to/unittest.rst:26
msgid "``setUp/tearDown``;"
msgstr ""

#: ../../../en/how-to/unittest.rst:27
msgid "``setUpClass/tearDownClass``;"
msgstr ""

#: ../../../en/how-to/unittest.rst:28
msgid "``setUpModule/tearDownModule``;"
msgstr ""

#: ../../../en/how-to/unittest.rst:33
msgid ""
"Additionally, :ref:`subtests <python:subtests>` are supported by the "
"`pytest-subtests`_ plugin."
msgstr ""

#: ../../../en/how-to/unittest.rst:36
msgid "Up to this point pytest does not have support for the following features:"
msgstr ""

#: ../../../en/how-to/unittest.rst:38
msgid "`load_tests protocol`_;"
msgstr ""

#: ../../../en/how-to/unittest.rst:41
msgid "Benefits out of the box"
msgstr ""

#: ../../../en/how-to/unittest.rst:43
msgid ""
"By running your test suite with pytest you can make use of several "
"features, in most cases without having to modify existing code:"
msgstr ""

#: ../../../en/how-to/unittest.rst:46
msgid "Obtain :ref:`more informative tracebacks <tbreportdemo>`;"
msgstr ""

#: ../../../en/how-to/unittest.rst:47
msgid ":ref:`stdout and stderr <captures>` capturing;"
msgstr ""

#: ../../../en/how-to/unittest.rst:48
msgid ""
":ref:`Test selection options <select-tests>` using ``-k`` and ``-m`` "
"flags;"
msgstr ""

#: ../../../en/how-to/unittest.rst:49
msgid ":ref:`maxfail`;"
msgstr ""

#: ../../../en/how-to/unittest.rst:50
msgid ""
":ref:`--pdb <pdb-option>` command-line option for debugging on test "
"failures (see :ref:`note <pdb-unittest-note>` below);"
msgstr ""

#: ../../../en/how-to/unittest.rst:52
msgid "Distribute tests to multiple CPUs using the :pypi:`pytest-xdist` plugin;"
msgstr ""

#: ../../../en/how-to/unittest.rst:53
msgid ""
"Use :ref:`plain assert-statements <assert>` instead of ``self.assert*`` "
"functions (:pypi:`unittest2pytest` is immensely helpful in this);"
msgstr ""

#: ../../../en/how-to/unittest.rst:58
msgid "pytest features in ``unittest.TestCase`` subclasses"
msgstr ""

#: ../../../en/how-to/unittest.rst:60
msgid "The following pytest features work in ``unittest.TestCase`` subclasses:"
msgstr ""

#: ../../../en/how-to/unittest.rst:62
msgid ""
":ref:`Marks <mark>`: :ref:`skip <skip>`, :ref:`skipif <skipif>`, "
":ref:`xfail <xfail>`;"
msgstr ""

#: ../../../en/how-to/unittest.rst:63
msgid ":ref:`Auto-use fixtures <mixing-fixtures>`;"
msgstr ""

#: ../../../en/how-to/unittest.rst:65
msgid ""
"The following pytest features **do not** work, and probably never will "
"due to different design philosophies:"
msgstr ""

#: ../../../en/how-to/unittest.rst:68
msgid ""
":ref:`Fixtures <fixture>` (except for ``autouse`` fixtures, see "
":ref:`below <mixing-fixtures>`);"
msgstr ""

#: ../../../en/how-to/unittest.rst:69
msgid ":ref:`Parametrization <parametrize>`;"
msgstr ""

#: ../../../en/how-to/unittest.rst:70
msgid ":ref:`Custom hooks <writing-plugins>`;"
msgstr ""

#: ../../../en/how-to/unittest.rst:73
msgid ""
"Third party plugins may or may not work well, depending on the plugin and"
" the test suite."
msgstr ""

#: ../../../en/how-to/unittest.rst:78
msgid "Mixing pytest fixtures into ``unittest.TestCase`` subclasses using marks"
msgstr ""

#: ../../../en/how-to/unittest.rst:80
msgid ""
"Running your unittest with ``pytest`` allows you to use its :ref:`fixture"
" mechanism <fixture>` with ``unittest.TestCase`` style tests.  Assuming "
"you have at least skimmed the pytest fixture features, let's jump-start "
"into an example that integrates a pytest ``db_class`` fixture, setting up"
" a class-cached database object, and then reference it from a unittest-"
"style test:"
msgstr ""

#: ../../../en/how-to/unittest.rst:105
msgid ""
"This defines a fixture function ``db_class`` which - if used - is called "
"once for each test class and which sets the class-level ``db`` attribute "
"to a ``DummyDB`` instance.  The fixture function achieves this by "
"receiving a special ``request`` object which gives access to :ref:`the "
"requesting test context <request-context>` such as the ``cls`` attribute,"
" denoting the class from which the fixture is used.  This architecture "
"de-couples fixture writing from actual test code and allows re-use of the"
" fixture by a minimal reference, the fixture name.  So let's write an "
"actual ``unittest.TestCase`` class using our fixture definition:"
msgstr ""

#: ../../../en/how-to/unittest.rst:134
msgid ""
"The ``@pytest.mark.usefixtures(\"db_class\")`` class-decorator makes sure"
" that the pytest fixture function ``db_class`` is called once per class. "
"Due to the deliberately failing assert statements, we can take a look at "
"the ``self.db`` values in the traceback:"
msgstr ""

#: ../../../en/how-to/unittest.rst:176
msgid ""
"This default pytest traceback shows that the two test methods share the "
"same ``self.db`` instance which was our intention when writing the class-"
"scoped fixture function above."
msgstr ""

#: ../../../en/how-to/unittest.rst:182
msgid "Using autouse fixtures and accessing other fixtures"
msgstr ""

#: ../../../en/how-to/unittest.rst:184
msgid ""
"Although it's usually better to explicitly declare use of fixtures you "
"need for a given test, you may sometimes want to have fixtures that are "
"automatically used in a given context.  After all, the traditional style "
"of unittest-setup mandates the use of this implicit fixture writing and "
"chances are, you are used to it or like it."
msgstr ""

#: ../../../en/how-to/unittest.rst:190
msgid ""
"You can flag fixture functions with ``@pytest.fixture(autouse=True)`` and"
" define the fixture function in the context where you want it used. Let's"
" look at an ``initdir`` fixture which makes all test methods of a "
"``TestCase`` class execute in a temporary directory with a pre-"
"initialized ``samplefile.ini``.  Our ``initdir`` fixture itself uses the "
"pytest builtin :fixture:`tmp_path` fixture to delegate the creation of a "
"per-test temporary directory:"
msgstr ""

#: ../../../en/how-to/unittest.rst:217
msgid ""
"Due to the ``autouse`` flag the ``initdir`` fixture function will be used"
" for all methods of the class where it is defined.  This is a shortcut "
"for using a ``@pytest.mark.usefixtures(\"initdir\")`` marker on the class"
" like in the previous example."
msgstr ""

#: ../../../en/how-to/unittest.rst:222
msgid "Running this test module ...:"
msgstr ""

#: ../../../en/how-to/unittest.rst:230
msgid ""
"... gives us one passed test because the ``initdir`` fixture function was"
" executed ahead of the ``test_method``."
msgstr ""

#: ../../../en/how-to/unittest.rst:235
msgid ""
"``unittest.TestCase`` methods cannot directly receive fixture arguments "
"as implementing that is likely to inflict on the ability to run general "
"unittest.TestCase test suites."
msgstr ""

#: ../../../en/how-to/unittest.rst:239
msgid ""
"The above ``usefixtures`` and ``autouse`` examples should help to mix in "
"pytest fixtures into unittest suites."
msgstr ""

#: ../../../en/how-to/unittest.rst:242
msgid ""
"You can also gradually move away from subclassing from "
"``unittest.TestCase`` to *plain asserts* and then start to benefit from "
"the full pytest feature set step by step."
msgstr ""

#: ../../../en/how-to/unittest.rst:249
msgid ""
"Due to architectural differences between the two frameworks, setup and "
"teardown for ``unittest``-based tests is performed during the ``call`` "
"phase of testing instead of in ``pytest``'s standard ``setup`` and "
"``teardown`` stages. This can be important to understand in some "
"situations, particularly when reasoning about errors. For example, if a "
"``unittest``-based suite exhibits errors during setup, ``pytest`` will "
"report no errors during its ``setup`` phase and will instead raise the "
"error during ``call``."
msgstr ""

#: ../../../en/how-to/usage.rst:5
msgid "How to invoke pytest"
msgstr ""

#: ../../../en/how-to/usage.rst:7
msgid ":ref:`Complete pytest command-line flag reference <command-line-flags>`"
msgstr ""

#: ../../../en/how-to/usage.rst:9
msgid ""
"In general, pytest is invoked with the command ``pytest`` (see below for "
":ref:`other ways to invoke pytest <invoke-other>`). This will execute all"
" tests in all files whose names follow the form ``test_*.py`` or "
"``\\*_test.py`` in the current directory and its subdirectories. More "
"generally, pytest follows :ref:`standard test discovery rules <test "
"discovery>`."
msgstr ""

#: ../../../en/how-to/usage.rst:18
msgid "Specifying which tests to run"
msgstr ""

#: ../../../en/how-to/usage.rst:20
msgid ""
"Pytest supports several ways to run and select tests from the command-"
"line."
msgstr ""

#: ../../../en/how-to/usage.rst:22
msgid "**Run tests in a module**"
msgstr ""

#: ../../../en/how-to/usage.rst:28
msgid "**Run tests in a directory**"
msgstr ""

#: ../../../en/how-to/usage.rst:34
msgid "**Run tests by keyword expressions**"
msgstr ""

#: ../../../en/how-to/usage.rst:40
msgid ""
"This will run tests which contain names that match the given *string "
"expression* (case-insensitive), which can include Python operators that "
"use filenames, class names and function names as variables. The example "
"above will run ``TestMyClass.test_something``  but not "
"``TestMyClass.test_method_simple``."
msgstr ""

#: ../../../en/how-to/usage.rst:46
msgid "**Run tests by node ids**"
msgstr ""

#: ../../../en/how-to/usage.rst:48
msgid ""
"Each collected test is assigned a unique ``nodeid`` which consist of the "
"module filename followed by specifiers like class names, function names "
"and parameters from parametrization, separated by ``::`` characters."
msgstr ""

#: ../../../en/how-to/usage.rst:51
msgid "To run a specific test within a module:"
msgstr ""

#: ../../../en/how-to/usage.rst:58
msgid "Another example specifying a test method in the command line:"
msgstr ""

#: ../../../en/how-to/usage.rst:64
msgid "**Run tests by marker expressions**"
msgstr ""

#: ../../../en/how-to/usage.rst:70
msgid ""
"Will run all tests which are decorated with the ``@pytest.mark.slow`` "
"decorator."
msgstr ""

#: ../../../en/how-to/usage.rst:72
msgid "For more information see :ref:`marks <mark>`."
msgstr ""

#: ../../../en/how-to/usage.rst:74
msgid "**Run tests from packages**"
msgstr ""

#: ../../../en/how-to/usage.rst:80
msgid ""
"This will import ``pkg.testing`` and use its filesystem location to find "
"and run tests from."
msgstr ""

#: ../../../en/how-to/usage.rst:84
msgid "Getting help on version, option names, environment variables"
msgstr ""

#: ../../../en/how-to/usage.rst:96
msgid "Profiling test execution duration"
msgstr ""

#: ../../../en/how-to/usage.rst:100
msgid "To get a list of the slowest 10 test durations over 1.0s long:"
msgstr ""

#: ../../../en/how-to/usage.rst:106
msgid ""
"By default, pytest will not show test durations that are too small "
"(<0.005s) unless ``-vv`` is passed on the command-line."
msgstr ""

#: ../../../en/how-to/usage.rst:110
msgid "Managing loading of plugins"
msgstr ""

#: ../../../en/how-to/usage.rst:113
msgid "Early loading plugins"
msgstr ""

#: ../../../en/how-to/usage.rst:115
msgid ""
"You can early-load plugins (internal and external) explicitly in the "
"command-line with the ``-p`` option::"
msgstr ""

#: ../../../en/how-to/usage.rst:119
msgid "The option receives a ``name`` parameter, which can be:"
msgstr ""

#: ../../../en/how-to/usage.rst:121
msgid ""
"A full module dotted name, for example ``myproject.plugins``. This dotted"
" name must be importable."
msgstr ""

#: ../../../en/how-to/usage.rst:122
msgid ""
"The entry-point name of a plugin. This is the name passed to "
"``setuptools`` when the plugin is registered. For example to early-load "
"the :pypi:`pytest-cov` plugin you can use::"
msgstr ""

#: ../../../en/how-to/usage.rst:129
msgid "Disabling plugins"
msgstr ""

#: ../../../en/how-to/usage.rst:131
msgid ""
"To disable loading specific plugins at invocation time, use the ``-p`` "
"option together with the prefix ``no:``."
msgstr ""

#: ../../../en/how-to/usage.rst:134
msgid ""
"Example: to disable loading the plugin ``doctest``, which is responsible "
"for executing doctest tests from text files, invoke pytest like this:"
msgstr ""

#: ../../../en/how-to/usage.rst:145
msgid "Other ways of calling pytest"
msgstr ""

#: ../../../en/how-to/usage.rst:150
msgid "Calling pytest through ``python -m pytest``"
msgstr ""

#: ../../../en/how-to/usage.rst:152
msgid ""
"You can invoke testing through the Python interpreter from the command "
"line:"
msgstr ""

#: ../../../en/how-to/usage.rst:158
msgid ""
"This is almost equivalent to invoking the command line script ``pytest "
"[...]`` directly, except that calling via ``python`` will also add the "
"current directory to ``sys.path``."
msgstr ""

#: ../../../en/how-to/usage.rst:165
msgid "Calling pytest from Python code"
msgstr ""

#: ../../../en/how-to/usage.rst:167
msgid "You can invoke ``pytest`` from Python code directly:"
msgstr ""

#: ../../../en/how-to/usage.rst:173
msgid ""
"this acts as if you would call \"pytest\" from the command line. It will "
"not raise :class:`SystemExit` but return the :ref:`exit code <exit-"
"codes>` instead. You can pass in options and arguments:"
msgstr ""

#: ../../../en/how-to/usage.rst:181
msgid "You can specify additional plugins to ``pytest.main``:"
msgstr ""

#: ../../../en/how-to/usage.rst:199
msgid "Running it will show that ``MyPlugin`` was added and its hook was invoked:"
msgstr ""

#: ../../../en/how-to/usage.rst:210
msgid ""
"Calling ``pytest.main()`` will result in importing your tests and any "
"modules that they import. Due to the caching mechanism of python's import"
" system, making subsequent calls to ``pytest.main()`` from the same "
"process will not reflect changes to those files between the calls. For "
"this reason, making multiple calls to ``pytest.main()`` from the same "
"process (in order to re-run tests, for example) is not recommended."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:4
msgid "Writing hook functions"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:10
msgid "hook function validation and execution"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:12
msgid ""
"pytest calls hook functions from registered plugins for any given hook "
"specification.  Let's look at a typical hook function for the "
"``pytest_collection_modifyitems(session, config, items)`` hook which "
"pytest calls after collection of all test items is completed."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:18
msgid ""
"When we implement a ``pytest_collection_modifyitems`` function in our "
"plugin pytest will during registration verify that you use argument names"
" which match the specification and bail out if not."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:22
msgid "Let's look at a possible implementation:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:31
msgid ""
"Here, ``pytest`` will pass in ``config`` (the pytest config object) and "
"``items`` (the list of collected test items) but will not pass in the "
"``session`` argument because we didn't list it in the function signature."
"  This dynamic \"pruning\" of arguments allows ``pytest`` to be \"future-"
"compatible\": we can introduce new hook named parameters without breaking"
" the signatures of existing hook implementations.  It is one of the "
"reasons for the general long-lived compatibility of pytest plugins."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:39
msgid ""
"Note that hook functions other than ``pytest_runtest_*`` are not allowed "
"to raise exceptions.  Doing so will break the pytest run."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:47
msgid "firstresult: stop at first non-None result"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:49
msgid ""
"Most calls to ``pytest`` hooks result in a **list of results** which "
"contains all non-None results of the called hook functions."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:52
msgid ""
"Some hook specifications use the ``firstresult=True`` option so that the "
"hook call only executes until the first of N registered functions returns"
" a non-None result which is then taken as result of the overall hook "
"call. The remaining hook functions will not be called in this case."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:60
msgid "hookwrapper: executing around other hooks"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:66
msgid ""
"pytest plugins can implement hook wrappers which wrap the execution of "
"other hook implementations.  A hook wrapper is a generator function which"
" yields exactly once. When pytest invokes hooks it first executes hook "
"wrappers and passes the same arguments as to the regular hooks."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:71
msgid ""
"At the yield point of the hook wrapper pytest will execute the next hook "
"implementations and return their result to the yield point in the form of"
" a :py:class:`Result <pluggy._Result>` instance which encapsulates a "
"result or exception info.  The yield point itself will thus typically not"
" raise exceptions (unless there are bugs)."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:77
msgid "Here is an example definition of a hook wrapper:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:97
msgid ""
"Note that hook wrappers don't return results themselves, they merely "
"perform tracing or other side effects around the actual hook "
"implementations. If the result of the underlying hook is a mutable "
"object, they may modify that result but it's probably better to avoid it."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:102
msgid ""
"For more information, consult the :ref:`pluggy documentation about "
"hookwrappers <pluggy:hookwrappers>`."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:108
msgid "Hook function ordering / call example"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:110
msgid ""
"For any given hook specification there may be more than one "
"implementation and we thus generally view ``hook`` execution as a ``1:N``"
" function call where ``N`` is the number of registered functions. There "
"are ways to influence if a hook implementation comes before or after "
"others, i.e.  the position in the ``N``-sized list of functions:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:139
msgid "Here is the order of execution:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:141
msgid ""
"Plugin3's pytest_collection_modifyitems called until the yield point "
"because it is a hook wrapper."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:144
msgid ""
"Plugin1's pytest_collection_modifyitems is called because it is marked "
"with ``tryfirst=True``."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:147
msgid ""
"Plugin2's pytest_collection_modifyitems is called because it is marked "
"with ``trylast=True`` (but even without this mark it would come after "
"Plugin1)."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:151
msgid ""
"Plugin3's pytest_collection_modifyitems then executing the code after the"
" yield point.  The yield receives a :py:class:`Result <pluggy._Result>` "
"instance which encapsulates the result from calling the non-wrappers.  "
"Wrappers shall not modify the result."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:155
msgid ""
"It's possible to use ``tryfirst`` and ``trylast`` also in conjunction "
"with ``hookwrapper=True`` in which case it will influence the ordering of"
" hookwrappers among each other."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:161
msgid "Declaring new hooks"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:165
msgid ""
"This is a quick overview on how to add new hooks and how they work in "
"general, but a more complete overview can be found in `the pluggy "
"documentation <https://pluggy.readthedocs.io/en/latest/>`__."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:170
msgid ""
"Plugins and ``conftest.py`` files may declare new hooks that can then be "
"implemented by other plugins in order to alter behaviour or interact with"
" the new plugin:"
msgstr ""

#: _pytest.hookspec.pytest_addhooks:1 of
msgid ""
"Called at plugin registration time to allow adding new hooks via a call "
"to ``pluginmanager.add_hookspecs(module_or_class, prefix)``."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:4 of
msgid "The pytest plugin manager."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:7 of
msgid "This hook is incompatible with ``hookwrapper=True``."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:177
msgid ""
"Hooks are usually declared as do-nothing functions that contain only "
"documentation describing when the hook will be called and what return "
"values are expected. The names of the functions must start with `pytest_`"
" otherwise pytest won't recognize them."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:181
msgid ""
"Here's an example. Let's assume this code is in the ``sample_hook.py`` "
"module."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:190
msgid ""
"To register the hooks with pytest they need to be structured in their own"
" module or class. This class or module can then be passed to the "
"``pluginmanager`` using the ``pytest_addhooks`` function (which itself is"
" a hook exposed by pytest)."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:202
msgid ""
"For a real world example, see `newhooks.py`_ from `xdist "
"<https://github.com/pytest-dev/pytest-xdist>`_."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:206
msgid ""
"Hooks may be called both from fixtures or from other hooks. In both "
"cases, hooks are called through the ``hook`` object, available in the "
"``config`` object. Most hooks receive a ``config`` object directly, while"
" fixtures may use the ``pytestconfig`` fixture which provides the same "
"object."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:219
msgid "Hooks receive parameters using only keyword arguments."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:221
msgid ""
"Now your hook is ready to be used. To register a function at the hook, "
"other plugins or users must now simply define the function "
"``pytest_my_hook`` with the correct signature in their ``conftest.py``."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:239
msgid "Using hooks in pytest_addoption"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:241
msgid ""
"Occasionally, it is necessary to change the way in which command line "
"options are defined by one plugin based on hooks in another plugin. For "
"example, a plugin may expose a command line option for which another "
"plugin needs to define the default value. The pluginmanager can be used "
"to install and use hooks to accomplish this. The plugin would define and "
"add the hooks and use pytest_addoption as follows:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:277
msgid ""
"The conftest.py that is using myplugin would simply define the hook as "
"follows:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:286
msgid "Optionally using hooks from 3rd party plugins"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:288
msgid ""
"Using new hooks from plugins as explained above might be a little tricky "
"because of the standard :ref:`validation mechanism <validation>`: if you "
"depend on a plugin that is not installed, validation will fail and the "
"error message will not make much sense to your users."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:293
msgid ""
"One approach is to defer the hook implementation to a new plugin instead "
"of declaring the hook functions directly in your plugin module, for "
"example:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:312
msgid ""
"This has the added benefit of allowing you to conditionally install hooks"
" depending on which plugins are installed."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:318
msgid "Storing data on items across hook functions"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:320
msgid ""
"Plugins often need to store data on :class:`~pytest.Item`\\s in one hook "
"implementation, and access it in another. One common solution is to just "
"assign some private attribute directly on the item, but type-checkers "
"like mypy frown upon this, and it may also cause conflicts with other "
"plugins. So pytest offers a better way to do this, :attr:`item.stash "
"<_pytest.nodes.Node.stash>`."
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:326
msgid ""
"To use the \"stash\" in your plugins, first create \"stash keys\" "
"somewhere at the top level of your plugin:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:334
msgid "then use the keys to stash your data at some point:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:342
msgid "and retrieve them at another point:"
msgstr ""

#: ../../../en/how-to/writing_hook_functions.rst:351
msgid ""
"Stashes are available on all node types (like :class:`~pytest.Class`, "
":class:`~pytest.Session`) and also on :class:`~pytest.Config`, if needed."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:5
msgid "Writing plugins"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:7
msgid ""
"It is easy to implement `local conftest plugins`_ for your own project or"
" `pip-installable plugins`_ that can be used throughout many projects, "
"including third party projects.  Please refer to :ref:`using plugins` if "
"you only want to use but not write plugins."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:12
msgid ""
"A plugin contains one or multiple hook functions. :ref:`Writing hooks "
"<writinghooks>` explains the basics and details of how you can write a "
"hook function yourself. ``pytest`` implements all aspects of "
"configuration, collection, running and reporting by calling :ref:`well "
"specified hooks <hook-reference>` of the following plugins:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:17
msgid "builtin plugins: loaded from pytest's internal ``_pytest`` directory."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:19
msgid ""
":ref:`external plugins <extplugins>`: modules discovered through "
"`setuptools entry points`_"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:22
msgid "`conftest.py plugins`_: modules auto-discovered in test directories"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:24
msgid ""
"In principle, each hook call is a ``1:N`` Python function call where "
"``N`` is the number of registered implementation functions for a given "
"specification. All specifications and implementations follow the "
"``pytest_`` prefix naming convention, making them easy to distinguish and"
" find."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:32
msgid "Plugin discovery order at tool startup"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:34
msgid "``pytest`` loads plugin modules at tool startup in the following way:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:36
msgid ""
"by scanning the command line for the ``-p no:name`` option and *blocking*"
" that plugin from being loaded (even builtin plugins can be blocked this "
"way). This happens before normal command-line parsing."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:40
msgid "by loading all builtin plugins."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:42
msgid ""
"by scanning the command line for the ``-p name`` option and loading the "
"specified plugin. This happens before normal command-line parsing."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:45
msgid "by loading all plugins registered through `setuptools entry points`_."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:47
msgid ""
"by loading all plugins specified through the :envvar:`PYTEST_PLUGINS` "
"environment variable."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:49
msgid ""
"by loading all :file:`conftest.py` files as inferred by the command line "
"invocation:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:52
msgid "if no test paths are specified, use the current dir as a test path"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:53
msgid ""
"if exists, load ``conftest.py`` and ``test*/conftest.py`` relative to the"
" directory part of the first test path. After the ``conftest.py`` file is"
" loaded, load all plugins specified in its :globalvar:`pytest_plugins` "
"variable if present."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:58
msgid ""
"Note that pytest does not find ``conftest.py`` files in deeper nested sub"
" directories at tool startup.  It is usually a good idea to keep your "
"``conftest.py`` file in the top level test or project root directory."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:62
msgid ""
"by recursively loading all plugins specified by the "
":globalvar:`pytest_plugins` variable in ``conftest.py`` files."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:72
msgid "conftest.py: local per-directory plugins"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:74
msgid ""
"Local ``conftest.py`` plugins contain directory-specific hook "
"implementations.  Hook Session and test running activities will invoke "
"all hooks defined in ``conftest.py`` files closer to the root of the "
"filesystem.  Example of implementing the ``pytest_runtest_setup`` hook so"
" that is called for tests in the ``a`` sub directory but not for other "
"directories::"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:94
msgid "Here is how you might run it::"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:100
msgid ""
"If you have ``conftest.py`` files which do not reside in a python package"
" directory (i.e. one containing an ``__init__.py``) then \"import "
"conftest\" can be ambiguous because there might be other ``conftest.py`` "
"files as well on your ``PYTHONPATH`` or ``sys.path``. It is thus good "
"practice for projects to either put ``conftest.py`` under a package scope"
" or to never import anything from a ``conftest.py`` file."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:108
msgid "See also: :ref:`pythonpath`."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:111
msgid ""
"Some hooks should be implemented only in plugins or conftest.py files "
"situated at the tests root directory due to how pytest discovers plugins "
"during startup, see the documentation of each hook for details."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:116
msgid "Writing your own plugin"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:118
msgid ""
"If you want to write a plugin, there are many real-life examples you can "
"copy from:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:121
msgid "a custom collection example plugin: :ref:`yaml plugin`"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:122
msgid "builtin plugins which provide pytest's own functionality"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:123
msgid "many :ref:`external plugins <plugin-list>` providing additional features"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:125
msgid ""
"All of these plugins implement :ref:`hooks <hook-reference>` and/or "
":ref:`fixtures <fixture>` to extend and add functionality."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:129
msgid ""
"Make sure to check out the excellent `cookiecutter-pytest-plugin "
"<https://github.com/pytest-dev/cookiecutter-pytest-plugin>`_ project, "
"which is a `cookiecutter template "
"<https://github.com/audreyr/cookiecutter>`_ for authoring plugins."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:134
msgid ""
"The template provides an excellent starting point with a working plugin, "
"tests running with tox, a comprehensive README file as well as a pre-"
"configured entry-point."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:138
msgid ""
"Also consider :ref:`contributing your plugin to pytest-dev<submitplugin>`"
" once it has some happy users other than yourself."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:146
msgid "Making your plugin installable by others"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:148
msgid ""
"If you want to make your plugin externally available, you may define a "
"so-called entry point for your distribution so that ``pytest`` finds your"
" plugin module. Entry points are a feature that is provided by "
":std:doc:`setuptools <setuptools:index>`."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:153
msgid ""
"pytest looks up the ``pytest11`` entrypoint to discover its plugins, thus"
" you can make your plugin available by defining it in your "
"``pyproject.toml`` file."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:178
msgid ""
"If a package is installed this way, ``pytest`` will load "
"``myproject.pluginmodule`` as a plugin which can define :ref:`hooks "
"<hook-reference>`. Confirm registration with ``pytest --trace-config``"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:184
msgid ""
"Make sure to include ``Framework :: Pytest`` in your list of `PyPI "
"classifiers <https://pypi.org/classifiers/>`_ to make it easy for users "
"to find your plugin."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:192
msgid "Assertion Rewriting"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:194
msgid ""
"One of the main features of ``pytest`` is the use of plain assert "
"statements and the detailed introspection of expressions upon assertion "
"failures.  This is provided by \"assertion rewriting\" which modifies the"
" parsed AST before it gets compiled to bytecode.  This is done via a "
":pep:`302` import hook which gets installed early on when ``pytest`` "
"starts up and will perform this rewriting when modules get imported.  "
"However, since we do not want to test different bytecode from what you "
"will run in production, this hook only rewrites test modules themselves "
"(as defined by the :confval:`python_files` configuration option), and any"
" modules which are part of plugins. Any other imported module will not be"
" rewritten and normal assertion behaviour will happen."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:207
msgid ""
"If you have assertion helpers in other modules where you would need "
"assertion rewriting to be enabled you need to ask ``pytest`` explicitly "
"to rewrite this module before it gets imported."
msgstr ""

#: _pytest.assertion.register_assert_rewrite:1 of
msgid "Register one or more module names to be rewritten on import."
msgstr ""

#: _pytest.assertion.register_assert_rewrite:3 of
msgid ""
"This function will make sure that this module or all modules inside the "
"package will get their assert statements rewritten. Thus you should make "
"sure to call this before the module is actually imported, usually in your"
" __init__.py if you are a plugin using a package."
msgstr ""

#: _pytest.assertion.register_assert_rewrite of
msgid "Raises"
msgstr ""

#: _pytest.assertion.register_assert_rewrite:9 of
msgid "If the given module names are not strings."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:214
msgid ""
"This is especially important when you write a pytest plugin which is "
"created using a package.  The import hook only treats ``conftest.py`` "
"files and any modules which are listed in the ``pytest11`` entrypoint as "
"plugins.  As an example consider the following package::"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:223
msgid "With the following typical ``setup.py`` extract:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:229
msgid ""
"In this case only ``pytest_foo/plugin.py`` will be rewritten.  If the "
"helper module also contains assert statements which need to be rewritten "
"it needs to be marked as such, before it gets imported. This is easiest "
"by marking it for rewriting inside the ``__init__.py`` module, which will"
" always be imported first when a module inside a package is imported.  "
"This way ``plugin.py`` can still import ``helper.py`` normally.  The "
"contents of ``pytest_foo/__init__.py`` will then need to look like this:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:248
msgid ""
"You can require plugins in a test module or a ``conftest.py`` file using "
":globalvar:`pytest_plugins`:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:254
msgid ""
"When the test module or conftest plugin is loaded the specified plugins "
"will be loaded as well. Any module can be blessed as a plugin, including "
"internal application modules:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:262
msgid ""
":globalvar:`pytest_plugins` are processed recursively, so note that in "
"the example above if ``myapp.testsupport.myplugin`` also declares "
":globalvar:`pytest_plugins`, the contents of the variable will also be "
"loaded as plugins, and so on."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:269
msgid ""
"Requiring plugins using :globalvar:`pytest_plugins` variable in non-root "
"``conftest.py`` files is deprecated."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:272
msgid ""
"This is important because ``conftest.py`` files implement per-directory "
"hook implementations, but once a plugin is imported, it will affect the "
"entire directory tree. In order to avoid confusion, defining "
":globalvar:`pytest_plugins` in any ``conftest.py`` file which is not "
"located in the tests root directory is deprecated, and will raise a "
"warning."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:278
msgid ""
"This mechanism makes it easy to share fixtures within applications or "
"even external applications without the need to create external plugins "
"using the ``setuptools``'s entry point technique."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:282
msgid ""
"Plugins imported by :globalvar:`pytest_plugins` will also automatically "
"be marked for assertion rewriting (see "
":func:`pytest.register_assert_rewrite`). However for this to have any "
"effect the module must not be imported already; if it was already "
"imported at the time the :globalvar:`pytest_plugins` statement is "
"processed, a warning will result and assertions inside the plugin will "
"not be rewritten.  To fix this you can either call "
":func:`pytest.register_assert_rewrite` yourself before the module is "
"imported, or you can arrange the code to delay the importing until after "
"the plugin is registered."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:294
msgid "Accessing another plugin by name"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:296
msgid ""
"If a plugin wants to collaborate with code from another plugin it can "
"obtain a reference through the plugin manager like this:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:304
msgid ""
"If you want to look at the names of existing plugins, use the ``--trace-"
"config`` option."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:311
msgid "Registering custom markers"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:313
msgid ""
"If your plugin uses any markers, you should register them so that they "
"appear in pytest's help text and do not :ref:`cause spurious warnings "
"<unknown-marks>`. For example, the following plugin would register "
"``cool_marker`` and ``mark_with`` for all users:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:328
msgid "Testing plugins"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:330
msgid ""
"pytest comes with a plugin named ``pytester`` that helps you write tests "
"for your plugin code. The plugin is disabled by default, so you will have"
" to enable it before you can use it."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:334
msgid ""
"You can do so by adding the following line to a ``conftest.py`` file in "
"your testing directory:"
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:343
msgid ""
"Alternatively you can invoke pytest with the ``-p pytester`` command line"
" option."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:346
msgid ""
"This will allow you to use the :py:class:`pytester <pytest.Pytester>` "
"fixture for testing your plugin code."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:349
msgid ""
"Let's demonstrate what you can do with the plugin with an example. "
"Imagine we developed a plugin that provides a fixture ``hello`` which "
"yields a function and we can invoke this function with one optional "
"parameter. It will return a string value of ``Hello World!`` if we do not"
" supply a value or ``Hello {value}!`` if we do supply a string value."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:383
msgid ""
"Now the ``pytester`` fixture provides a convenient API for creating "
"temporary ``conftest.py`` files and test files. It also allows us to run "
"the tests and return a result object, with which we can assert the tests'"
" outcomes."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:425
msgid ""
"Additionally it is possible to copy examples to the ``pytester``'s "
"isolated environment before running pytest on it. This way we can "
"abstract the tested logic to separate files, which is especially useful "
"for longer tests and/or longer ``conftest.py`` files."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:429
msgid ""
"Note that for ``pytester.copy_example`` to work we need to set "
"`pytester_example_dir` in our ``pytest.ini`` to tell pytest where to look"
" for example files."
msgstr ""

#: ../../../en/how-to/writing_plugins.rst:464
msgid ""
"For more information about the result object that ``runpytest()`` "
"returns, and the methods that it provides please check out the "
":py:class:`RunResult <_pytest.pytester.RunResult>` documentation."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:6
msgid "How to implement xunit-style set-up"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:8
msgid ""
"This section describes a classic and popular way how you can implement "
"fixtures (setup and teardown test state) on a per-module/class/function "
"basis."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:14
msgid ""
"While these setup/teardown methods are simple and familiar to those "
"coming from a ``unittest`` or ``nose`` background, you may also consider "
"using pytest's more powerful :ref:`fixture mechanism <fixture>` which "
"leverages the concept of dependency injection, allowing for a more "
"modular and more scalable approach for managing test state, especially "
"for larger projects and for functional testing.  You can mix both fixture"
" mechanisms in the same file but test methods of ``unittest.TestCase`` "
"subclasses cannot receive fixture arguments."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:26
msgid "Module level setup/teardown"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:28
msgid ""
"If you have multiple test functions and test classes in a single module "
"you can optionally implement the following fixture methods which will "
"usually be called once for all the functions:"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:43
msgid "As of pytest-3.0, the ``module`` parameter is optional."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:46
msgid "Class level setup/teardown"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:48
msgid ""
"Similarly, the following methods are called at class level before and "
"after all test methods of the class are called:"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:69
msgid "Method and function level setup/teardown"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:71
msgid "Similarly, the following methods are called around each method invocation:"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:86
msgid "As of pytest-3.0, the ``method`` parameter is optional."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:88
msgid ""
"If you would rather define test functions directly at module level you "
"can also use the following functions to implement fixtures:"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:104
msgid "As of pytest-3.0, the ``function`` parameter is optional."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:106
msgid "Remarks:"
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:108
msgid ""
"It is possible for setup/teardown pairs to be invoked multiple times per "
"testing process."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:111
msgid ""
"teardown functions are not called if the corresponding setup function "
"existed and failed/was skipped."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:114
msgid ""
"Prior to pytest-4.2, xunit-style functions did not obey the scope rules "
"of fixtures, so it was possible, for example, for a ``setup_method`` to "
"be called before a session-scoped autouse fixture."
msgstr ""

#: ../../../en/how-to/xunit_setup.rst:118
msgid ""
"Now the xunit-style functions are integrated with the fixture mechanism "
"and obey the proper scope rules of fixtures involved in the call."
msgstr ""

